if a word @ xmath0 can be written as @ xmath10 , the words @ xmath11 , @ xmath12 , and @ xmath13 are all the prefix , prefix , and suffix of @ xmath0 , respectively . a word @ xmath0 = @ xmath14 is also a de bruijn sequence of order @ xmath1 , if each word in @ xmath15 appears exactly once with @ xmath0 as a factor . for example , @ xmath16 is a complete de bruijn sequence of order @ xmath17 since each consecutive word of length 18 appears in it exactly once as a factor : @ xmath18 . the de bruijn sequence can be seen in the following example . suppose there are two numbers of balls , each of which is marked with a factor : @ xmath14 , and there is a circular pipe that can hold balls in a straight line . on the top of that pipe is an opening , through which you can drop balls into that pipe , and on the bottom is a half - door , which can hold the contents of at most @ xmath1 balls . when there are more than @ x##math1 . in the pipe , the trap - door opens and those balls at the bottom fall out until only @ xmath1 balls remain . if we have them all numbered as in the de bruijn sequence in the alphabet @ xmath14 of order @ xmath1 , then each @ xmath1 ball in will be numbered as in the alphabet . it is easy to see that a de - bruijn sequence of order @ xmath1 , if any , is of order @ xmath19 and its prefix of length @ xmath20 is equal to its prefix of length @ xmath20 . however , sometimes the de - bruijn sequence is extended in a simpler way by adding the last @ xmath20 word , which can be understood as the equivalence relation of and in the english language . the de bruijn sequence is sometimes called the de bruijn - good sequence , named after de bruijn @ xcite and good @ xcite who independently proved the properties of these sequences for many words ; the latter also defined a constant @ xmath21 for the total length of those balls of order @ xmath1 . the construction of the de brui##jn ##f , however , goes back at least to 1894 , when flye sainte - marie @ xcite studied the sequence and provided the exact formula @ xmath21 . for an odd number @ xmath14 , van aardenne - ehrenfest and de bruijn gave the formula @ xmath22 for the total number of de bruijn sequences of numbers @ xmath1 . given the total number of de bruijn sequences , an important question is how to construct the de bruijn sequence ( smallest one , lexicographically smallest one , lexicographically largest one ) . for other de bruijn sequences , see the formula @ xcite . the de bruijn sequence is at times called the binary sequence @ xcite , and has led to the following names : binary - sequences @ xcite , random numbers @ xcite , sequences of random words @ xcite , random polynomials of a finite group @ xcite , lyndon rings and rings , primitive polynomials and binary trees . in this case , we have a version of the de bruijn sequence . to understand the problem , let us return to the simple trap game described at the beginning . here the trap - game can be more than. when there are @ xmath23 = 24 balls in the pipe , the trap - door opens and the balls fall out until there are 24 @ xmath1 balls in the pipe . is there an ordering of all the balls such that the @ xmath1 ball always appears exactly once in the pipe ? the answer is ` ` ' ' ' for all positive integers @ xmath24 . the result is the multi - shift de bruijn sequence . we will consider the properties of the multi - shift de bruijn sequence , the # ##ity of multi - shift de bruijn sequences , and the multi - shift de bruijn sequence , and the application of the multi - shift de bruijn sequence to the frobenius problem of the complex monoid . let @ xmath25 be the _ word _ and let @ xmath26 be the word _ @ xmath14 . the _ factor _ of @ xmath0 is denoted by @ xmath27 and the _ factor _ @ xmath28 of @ xmath0 is denoted by @ xmath29 . if @ xmath30 for any non - negative integer @ xmath31 , we say that @ xmat##h32 appears in @ xmath0 as _ a modulo @ xmath2 position _ . the set of all words of length @ xmath1 is denoted by @ xmath15 and the set of all empty words is denoted by @ xmath33 , where @ xmath34 is the _ _ word _ . the set of all words @ xmath35 is denoted by @ xmath36 , or by @ xmath37 . the sequence @ xmath0 = @ xmath14 is an exactly _ multi - shift de bruijn sequence _ of length @ xmath2 and length @ xmath1 , if every word in @ xmath15 appears exactly once in @ xmath0 as a result of a modulo @ xmath2 position . for example , that of the @ xmath17 - shift de bruijn sequence of length @ xmath38 is @ xmath39 , which can be written as follows : @ xmath40 the multi - shift de bruijn sequence is the de bruijn sequence in the way de bruijn sequences are the @ xmath41 - shift de bruijn sequencesof the same order . it is easy to see that the prefix of one @ xmath2 - shift de bruijn sequence of factors @ xmath1 , if any , is equal to @ xmath42 . using the definition of multi - factor de bruijn sequence , the following result holds . [ 1 : 1 ] let @ xmath0 be one @ xmath2 - shift de bruijn sequence @ xmath0 of order @ xmath1 , @ xmath43 . then the prefix of length @ xmath44 of @ xmath0 is equal to the prefix of length @ xmath44 of @ xmath0 . let @ xmath0 be one @ xmath2 - shift de bruijn sequence @ xmath0 of order @ xmath1 , @ xmath14 and factors @ xmath45 . let @ xmath46 imply that @ xmath47 . if @ xmath48 , then we have the set of all factors @ xmath49 and the set of all factors @ xmath50 for @ xmath51 . the former covers factors @ xmath52 and the latter coversthen @ xmath53 for all @ xmath54 . since the numbers are equal , we have @ xmath55 . so we have @ xmath56 . compare the set of all factors @ xmath57 and the set of all factors @ xmath58 for @ xmath51 and @ xmath59 . by the same reasoning , we have @ xmath60 for @ xmath61 . then , comparing the set of all @ xmath62 and the set of all @ xmath63 for @ xmath51 , we have the equality @ xmath64 . finally , we have the equality @ xmath65 . from equation [ 1 : 1 ] , we see that when @ xmath43 , the multi - shift de bruijn sequence can be written as a regular word and the results for multi - shift de bruijn sequences of the two special cases are equivalent . in this way , we define the multi - shift de bruijn sequence in the context of regular words . the _ ( non - empty ) _ triple _ , or _ triple _ for short , is a triple @ xmath66 consisting of the triple @ xmat##h67 of _ vertices _ , a sequence @ xmath68 of _ vertices _ , and an _ edge sequence _ @ xmath69 . but we do not define the sequence @ xmath70 , since we say the set of all - edges and _ vertices between the same set of vertices . when @ xmath71 , we say the sequence @ xmath9 from @ xmath32 to @ xmath72 , where vertex @ xmath73 and vertex @ xmath74 are called _ tail _ and _ head _ , respectively . the indegree @ xmath75 ( outdegree @ xmath76 , respectively ) of the sequence @ xmath72 is the set of vertices with @ xmath72 as the vertex ( the vertices , respectively ) . a _ path _ _ @ xmath77 is a path @ xmath78 such that @ xmath79 for all @ xmath80 . the path is _ left _ , if @ xmath81 . two _ paths are considered closed paths if one is the right extension of the other . the _ _ path _ is _ rightone that crosses each arc exactly once . a cycle _ is a hamilton cycle that crosses each arc exactly once . an _ ( connected ) arborescence _ is a graph with a single root , called the _ root _ , such that it contains every vertex of @ xmath77 , the number of edges is exactly one less than the number of vertices , and there is exactly one path from the root to every other vertex . we denote the total number of half cycles , hamilton cycles , and arborescence of @ xmath77 by @ xmath82 , @ xmath83 , and @ xmath84 , respectively . an _ ( connected ) graph _ is defined as a graph such that for every pair of arcs @ xmath85 , there is an arc @ xmath9 , @ xmath86 , if and only if there is a corresponding arc @ xmath87 , @ xmath88 . in this case , we define @ xmath89 and a corresponding arborescence , called a _ spanning tree _ . the half - cycle @ xmath90 of @ xmath66 is defined by @ xmath91 such that forevery pair of arcs @ xmath92 , @ xmath93 , there is an arc @ xmath94 , @ xmath95 and those two are the two words in @ xmath96 . hamilton cycles exist in the graph @ xmath77 if and only if hamilton cycles exist in the 2 - graph @ xmath90 . we replace the word in @ xmath97 with @ xmath98 , where @ xmath99 for @ xmath100 . then by definition , the following equations are valid . [ example : arcgraph ] the graph @ xmath101 is the graph @ xmath102 . by definition , @ xmath103 where @ xmath104 , and @ xmath105 . for every pair of arcs @ xmath106 of @ xmath97 with @ xmath107 , there is an arc @ xmath108 of @ xmath102 ; and for every arc @ xmath109 of @ xmath102 , @ xmath110 so , by definition , @ xmath10##2 . the arc - graph of @ xmath97 . [ theorem : theorem ] suppose @ xmath111 . ( 1 ) there is a @ xmath112 - to - @ xmath41 mapping from the set of @ xmath2 - shift de bruijn sequences of order @ xmath1 onto the set of hamilton cycles in @ xmath97 . ( 2 ) there is a @ xmath112 - to - @ xmath41 mapping from the set of @ xmath2 - shift de bruijn sequences of order @ xmath1 onto the set of hamilton cycles in @ xmath113 . suppose @ xmath114 . ( 3 ) suppose that a second cycle @ xmath115 associated with the first cycle @ xmath116 also contains the @ xmath2 - shift de bruijn sequences of order @ xmath1 induced by @ xmath117 and vice versa . then the @ xmath118 - to - @ xmath41 mapping is . ( 3 ) . in [ theorem : arcgraph ] , this result follows from ( 1 ) . [ theorem :1 ] for every vertex @ xmath14 , and over @ xmath24 , the @ xmath2 - shift de bruijn sequences of order @ xmath1 over @ xmath14 are . next we assume @ xmath119 . let @ xmath120 be the value of the word in @ xmath15 for @ xmath114 . then the word @ xmath121 is an @ xmath2 - shift de bruijn sequence of order @ xmath1 over @ xmath14 . next we assume @ xmath122 and that there is an effective word over @ xmath113 . then by definition [ 1 : existence ] , the existence of @ xmath2 - shift de bruijn sequences of order @ xmath1 over @ xmath14 is proved . to prove the existence of the effective tour , we first need to assume that @ xmath113 is connected and that @ xmath123 for every vertex @ xmath72 , both of which are connected : for every vertex @ xmath72 in @ xmath113 , @xmath72 is connected to the case @ xmath124 by both , and @ xmath125 . since @ xmath2 - shift de bruijn sequence of order @ xmath1 exists , in this case we consider the total number of possible @ xmath2 - shift de bruijn sequences of order @ xmath1 , and we denote the result by @ xmath126 . next , we consider the general case . [ example : countnlesm ] for @ xmath6 , @ xmath127 , where @ xmath45 . = @ xmath45 . by the definition of the multi - element de bruijn sequence , in the case @ xmath6 , @ xmath2 - shift de bruijn sequences of order @ xmath1 are exactly those of the case @ xmath128 , where @ xmath129 and @ xmath120 are the sets of all words in @ xmath15 . therefore , the total number of possible words is @ xmath5 . to study the case @ xmath8 , we apply the theorem of van aarden##ne - ehrenfest and de bruijn , which show the relation between the number of such tours in a particular kind of graph and the number of such tours in a sub - graph . [ theorem : ehrenfestbruijn ] let @ xmath66 be a vertex such that @ xmath130 for which @ xmath131 . let @ xmath132 . the graph @ xmath97 satisfying the conditions of . [ theorem : ehrenfestbruijn ] with @ xmath133 . now , considering the relation between the multi - vertex de bruijn graph and the such tours in the arc graph @ xmath97 , we have the following approximation algorithm for @ xmath126 . [ theorem : equivalent ] for @ xmath134 , @ xmath135 , where @ xmath45 , @ xmath136 . let @ xmath45 , @ xmath136 . # # [ theorem : equivalent ] , @ xmath137 to complete the first step of solving @ xmath126 for @ xmath8 , wewe have these formulas , which are often used in the literature to determine the values of the angles in certain classes of graphs . [ theorem : hamilton ] in a graph @ xmath66 , @ xmath138 . [ theorem : hamilton ] in a graph @ xmath66 , the number of spanning trees is equal to the square of the laplacian matrix of @ xmath77 , which is the identity matrix of elements of the identity matrix . [ theorem : countnles2 . ] for @ xmath139 , @ xmath140 , where @ xmath45 . let @ xmath141 and @ xmath45 . let @ xmath142 . by definition , , from any edge to any vertex , there are @ xmath144 - many edges in @ xmath77 . we turn @ xmath77 into a complete graph @ xmath145 by removing the half - edges ; there are @ xmath144 - many of them for every vertex . since for every pair of vertices @ xmath85 there are @ xmath144- many arcs joins @ xmath146 to @ xmath147 and then there is @ xmath144 - many arcs joins @ xmath147 to @ xmath146 , the graph @ xmath145 is also an arc cycle by our definition . the arc of @ xmath145 is of degree @ xmath148 . then the laplacian graph of @ xmath145 is @ xmath149 by theorem [ theorem : best ] , the degree of arborescence @ xmath150 is equal to the degree of @ xmath151 , which is @ xmath152 . then by theorem [ theorem : best ] , the number of arc cycles in degree @ xmath77 is @ xmath153 . then , by theorem [ theorem : best ] , the number of @ xmath2 - degree de bruijn cycles of degree @ xmath1 is @ xmath154 . [ theorem : best ] for @ xmath6 , @ xmath127 , and for @ xmath155 , @ xmath14##0 , where @ xmath45 . for @ xmath6 , the equality @ xmath127 is given by equation [ proof : countnlesm ] . then we have @ xmath156 . for @ xmath136 . then using equation [ proof : existence ] , [ proof : countnles2 ##m ] , we have @ xmath157 . in this case , we have the problem of generating an @ xmath2 - shift de bruijn sequence of order @ xmath1 for all real and complex numbers @ xmath24 . when @ xmath6 , the @ xmath2 - shift de bruijn sequence of order @ xmath1 is easy to generate as shown by equation [ 1 : 1 ] . next we consider the equality @ xmath158 . we then consider the algorithms for generating an @ xmath2 - shift de bruijn sequence of order @ xmath1 . we assume that @ xmath2 - shift de bruijn sequence of order @ xmath159 can be generated by the @ de bruijn sequence generation algorithm , just as used by fred##ricksen @ xcite . to do this , we first generate a de bruijn sequence @ xmath0 of order @ xmath160 over the word @ xmath161 . then we replace the word of @ xmath0 over @ xmath162 with the corresponding word of order @ xmath2 over @ xmath14 . it is easy to see that the resulting sequence is an @ xmath2 - shift de bruijn sequence of order @ xmath159 . the general method of generating multi - length de bruijn sequences is to generate @ xmath163 - shift de bruijn sequences of order @ xmath164 for @ xmath165 , modifying the sequence to produce an equivalent @ xmath2 - shift de bruijn sequence of order @ xmath1 . then @ xmath166 generate two words , and @ xmath46 , where @ xmath136 . the case @ xmath167 is well known and the case @ xmath168 is unknown . now we generate @ xmath169 and @ xmath170 . we generate @ xmath##171 , @ xmath172 and generate @ xmath173 such that @ xmath174 is an @ xmath175 - shift de bruijn sequence of order @ xmath176 and @ xmath177 ; and generate @ xmath178 , @ xmath179 and generate @ xmath180 such that @ xmath181 is an @ xmath182 - shift de bruijn sequence of order @ xmath183 and @ xmath184 . define @ xmath45 , @ xmath185 , @ xmath186 . we define @ xmath187 , @ xmath188 , @ xmath189 , @ xmath190 . then the first word @ xmath191 is an @ xmath2 - shift de bruijn sequence of order @ xmath1 , where @ xmath192 and @ xmath193 . to complete the proof , we assume that each word in @ xmath194 appears in @ xmath195 as a sequence at least modulo @ xmath2 , andonce . then , since @ xmath196 , every word in @ xmath197 is in @ xmath198 by a factor of two modulo @ xmath2 + . once . therefore , the resulting sequence is called an @ xmath2 - shift de bruijn sequence of order @ xmath1 . now , we will have an example . consider also an @ xmath17 - shift de bruijn sequence of order @ xmath199 . consider @ xmath200 and we will find the words @ xmath201 , which is @ xmath202 , and @ xmath203 , which is @ xmath204 . then the @ xmath17 - shift de bruijn sequence of order @ xmath199 is found in @ xmath205 where the letters @ xmath41 and @ xmath17 indicate whether the word is from the word @ xmath206 ( words @ xmath207 ) or from the word @ xmath208 ( words @ xmath209 ) . now we have the following example , which uses the following sequence of ` ` .' ' ' uses @ xcite for - shift de bruijn sequences . let @ xmath24 be all positive integers . the following algorithm generates an @ xmath2 - shift de bruijn sequence of length @ xmath1 : 1 . replace the prefix @ xmath0 with @ xmath1 * ; 2 . add to the end of the sequence @ xmath0 the lexicographically correct prefix of length @ xmath2 such that the prefix of length @ xmath1 of the sequence has not been changed , if for all modulo @ xmath2 * ; 3 . repeat the same sequence until no word can be added . to apply the algorithm , suppose we assume that when the sequence ends , the prefix @ xmath32 of length @ xmath44 of @ xmath0 is only 1 . to see this , suppose @ xmath32 appears in @ xmath124 . since no word can be added , then @ xmath210 words of length @ xmath1 with prefix @ xmath32 appear in @ xmath0 and then @ xmath32 appears in @ xmath0 by a bitat a modulo @ xmath2 position @ xmath211 times . suppose there are @ xmath211 words of length @ xmath1 with length @ xmath32 that appear in @ xmath0 at a modulo @ xmath2 position , which is the result of the multi - word de bruijn sequence . therefore , @ xmath212 times , then @ xmath124 appears in @ xmath0 as a factor at a modulo @ xmath2 position @ xmath211 , and then all words except @ xmath213 appear in @ xmath0 as a factor at a modulo @ xmath2 position . by the definition , every word of length @ xmath1 will appear only in @ xmath0 at a modulo position . however , in order to prove the validity of the definition , it needs to prove every word of length @ xmath1 appears in @ xmath0 as a factor at a modulo @ xmath2 position . then every word @ xmath72 does not appear in @ xmath0 at a modulo @ xmath2. . . @ xmath214 and the word @ xmath215 do not appear in @ xmath0 as a factor at a modulo @ xmath2 position as well ; however , there are @ xmath216 words of @ xmath217 in @ xmath0 at a modulo @ xmath2 position , which means @ xmath72 appears in @ xmath0 as a factor at a modulo @ xmath2 position . using this procedure , all of the words @ xmath215 , @ xmath218 , @ xmath219 , @ xmath220 appear in @ xmath0 as a factor at a modulo @ xmath2 position . as for @ xmath221 , we found that @ xmath222 appears in @ xmath0 as a factor at a modulo @ xmath2 position , no factor . therefore , no word of the @ xmath1 appears at a modulo @ xmath2 position . now , we used the procedure to find an @ xmath17 - a de bruijn word of the @ xmath19##9 . starting from @ xmath223 , since @ xmath224 does not exist as a prefix of x modulo @ xmath17 ##5 , we add @ xmath225 to the original sequence @ xmath223 . using this sequence and the sequences @ xmath225 , @ xmath225 , @ xmath226 , @ xmath225 , , , we generate the sequence : @ xmath227 if we can shift the sequence @ xmath228 to the left , the sequence generated by the left shift is the lexicographically correct @ xmath2 - a de bruijn sequence of length @ xmath1 . the construction of multi - element de bruijn sequences is motivated by the problem of arithmetic , specifically the frobenius problem of the modular monoid . given @ xmath160 and @ xmath229 , such that @ xmath230 , then there are only infinitely many positive integers that _ could _ _ be written as a non - negative integer linear combination of @ xmath229 . the _ _ frobenius problem _ is to find the largest positive integer, which is denoted by @ xmath231 . for example , @ xmath232 . if all @ xmath229 , consisting of words , are chosen such that there are _ infinitely many words that _ can not _ be written as combinations of words from the set @ xmath233 , the _ frobenius problem for the finite monoid _ @ xcite is to find the longest possible word . if all @ xmath229 consists of words _ @ xmath2 , @ xmath1 , @ xmath234 , there is an upper bound : the length of the longest word that can not be written as combinations of words from the set @ xmath233 is less than or equal to @ xmath235 , where @ xmath236 . @ xcite however , the upper bound is not and the proof is based on the multi - element de bruijn algorithm . we denote the length of all words that can be written as combinations of words _ @ xmath237 , including the longest word , by @ xmath238 . @ xcite if _ @ xmath239 , @ xmath##234 , such that @ xmath240 is finite and the longest words in @ xmath240 are exactly the words @ xmath241 , where @ xmath242 is an @ xmath2 - shift de bruijn sequence of order @ xmath44 . for example , for the sequence of words @ xmath243 such that @ xmath244 is finite , the longest words in @ xmath244 are of order less than or equal to @ xmath245 . to use @ xmath237 to obtain the upper bound , we first construct an anbitrary @ xmath38 - shift de bruijn sequence of order @ xmath246 and @ xmath247 . then , using @ xmath242 , we construct the sequence @ xmath248 @ xmath249 , @ xmath250 , @ xmath251 , @ xmath252 , @ xmath253 , @ xmath254 , @ xmath255 , @ xmath256 , @ xmath257 , @ xmath258 , @ x##math259 , @ xmath260 , @ xmath261 , @ xmath262 , @ xmath263 @ xmath264 . we have @ xmath265 and each of the following words , @ xmath151 of length , @ xmath266 , followed by : @ xmath267 in this example , we extended the original de bruijn sequence to a new multi - word sequence . each word @ xmath0 has an @ xmath2 - shift de bruijn sequence @ xmath268 of order @ xmath1 , if each word of order @ xmath1 occurs exactly once as a power of two modulo @ xmath2 , . this example de bruijn sequence is the @ xmath41 - shift de bruijn sequence . we have the maximum number of possible @ xmath2 - shift de bruijn sequences of order @ xmath1 is @ xmath269 for @ xmath6 and is @ xmath140 for @ xmath8 , where @ xmath45 . this result is the result @ xmath27##0 for the generation of regular de bruijn sequences . suppose we have an independent linear polynomial ; if computing the factors yields a linear form , then the polynomial is to be denoted as @ xmath271 . we have two algorithms for generating a @ xmath2 - regular de bruijn sequence of size @ xmath1 . the first algorithm is to generate it from the regular multi - shift de bruijn sequences , where the factor is a function of the polynomial . the second is the use of the ` ` # ##ential ' ' algorithm ( for example , , ) for generating regular de bruijn sequences . the multi - shift de bruijn sequence finds application in the frobenius problem as a linear monoid through the use of , . it would be important to note that this basic property of the de bruijn sequence can apply in many areas of theoretical computer science and applied mathematics .