real time monitoring of the power grid and analysis of power consumption @ xcite allows accurate analysis of network structure and network state variables . grid terminal units ( rtus ) send data collected from the grid ##s to the central control center for further analysis and subsequent use in analyzing network structure . the collected data can be broadly classified into two categories : meter readings and breaker status . the meter readings at power grid first determine the current operational state of the network . the meter readings , consisting of meter readings and the current voltage measurements , are then used to determine the state variables of the estimated network . in a practical sense , the meter measurements result from noise , that is generated at startup and during transmission to the control center . the amount of this noise is reduced through use of redundant / redundant equipment and use of sophisticated anti - noise detection and analysis techniques at the grid @ xcite . cyber - attack on the power grid refers to manipulation of measurements ( meter readings and breaker status ) by an attacker , aimed at changing the amount of noise , without being detected by the network or sensors . the effectiveness of cyber attacks has in fact been demonstrated by computer experiments like the cyber attack on department of energy # ##nell ##a and the cyber attack on phasormeasurement units ( pmus ) @ xcite . the research on cyber - attacks has also looked at adversaries that use meter data ( and thus breaker status ) to perform state estimation . hidden data mining and injection of malicious code into systems were also discussed in @ xcite . using a model - based method for state estimation , the authors of @ xcite proposed an attack mechanism using several methods . following this , various methods have been proposed to detect such attacks under different security conditions . these include multi - mode @ xcite , dynamic ##s detection @ xcite , dynamic detection of @ xmath0 ##2 @ xcite , model - based ##off detection for attacks with phasor measurement units ( pmus ) @ xcite among others . the possible security side - effects of such hidden data attacks in embedded systems are discussed in @ xcite . in a recent paper @ xcite , the authors analyzed hidden data in the more robust and stable form of meter data ( breaker status ) and meter data alone . all of these attacks rely on data mining and injection and meter data , however , require multiple - step detection ##ing in real time . the effectiveness of this is limited because several steps are required to detect the attack mechanism multiple times . thethis time , we focus on the attacks that can occur through changes in breaker status . suppose the adversary changes the status of a few meter meters from @ xmath1 ( closed ) to @ xmath2 ( open ) , as well as changing ( interrupting the recording ) of flow measurements on a number of transmission lines in the system . however , the adversary does not change the meter meter to an incorrect status . we call these attacks as breaker - type attacks . note that current readings , like voltage readings , are noisy in nature and transmitted with low frequency . they are much harder to detect , even in systems with limited bandwidth . jamming attacks , by sensors or by means of other devices , are much more expensive than measuring flow measurements . in theory , this does not raise a false alarm because power loss from random voltage drops occurs under normal conditions . the breaker - type attack model was developed by the authors for systems with a single grid , taking only line flow measurements from @ xcite . this model extends the model to a system with line flows and voltage drops and uses a simple graph - coloring algorithm to find the optimal hidden attack . our graph coloring based model is in principle similar to @ .##cite which studies big data analysis using a graph coloring technique . however , the article ends here . our attack model does not use sets of breaker readings . instead , status changes and line flow values provide a complete set of necessary and sufficient conditions for hidden attacks . the main idea of our paper is that under normal operating conditions , a single break status change ( with the line flow values jamming ) is enough to create an effective attack . in addition , we conclude that if a normal attack can be created by changing the status of a set of breakers , then a hidden attack with only one break status change exists as well . this is possible because the attack will rely on jamming the line flow values , and selecting the system to attack . therefore , our attack model does not depend on the actual system state or the line flow values , and has no memory requirements . the rest of this paper is summarized as follows . we use the same techniques used in the risk analysis and describe the attack design in the next section . the graph coloring approach to finding the necessary and sufficient conditions for a hidden attack and elucidating them is discussed in section [ sec : coloring ] . the design of the actual hidden attack is discussed in section [ sec : coloring ] , with simulations .ieee special committee . finally , more details and further details of work are given in section [ 2 : 1 ] . first , we give a detailed description of the # ##s . we define the first - line of the operation - edge @ xmath3 where @ xmath4 denotes the set of edges / nodes of size @ xmath5 and @ xmath6 denotes the set of operational edges of size @ xmath7 . the set of the operation directions for the edge is denoted by the diagonal matrix @ xmath8 of size @ xmath9 . we note that edges have to be exactly zero ( @ xmath8 is a matrix ) and not a non - identity matrix for purposes of identification . the inverse to the diagonal matrix is denoted by @ xmath10 of size @ xmath11 . the corresponding edge @ xmath12 has edges @ xmath13 and @ xmath14 has the corresponding vertex @ xmath15 and @ xmath10 , where @ xmath16 . @ xmath17 has the corresponding starting point of @ xmath18 with start at the @ xmath19 vertex . the direction of operation for edge @ xmath12 istakes to be from @ xmath13 to @ xmath14 , without any loss of information . we use the following bus flow measurements for state estimation . this model @ xcite . the state vectors in this model are the line segment measurements , denoted by the @ xmath20 and @ xmath21 . the number of measurements is denoted by the symbol @ xmath22 . then the injection measurements are included in @ xmath23 and the flow measurements are included in @ xmath24 . state estimation on the dc model relies on the injection measurements @ @ xmath8 for state estimation and then on the flow vector @ xmath25 for calculating the state vector @ xmath21 . the difference between @ xmath21 and @ xmath25 in the above model is given by @ xmath26 where @ xmath27 is the root mean square state vector with density matrix @ xmath28 . @ xmath29 is the state vector and depends on the grid topology and susceptance of the system . if the @ xmath30 position at @ xmath25 corresponds to the current position in at @ xmath12 . then @xmath31 ( the @ xmath30 position of @ xmath29 ) is given by @ xmath32 = m _ { ab } [ _ { ab } \ begin { flow } \ end { flow } \ ] ] with the non - zero entries at the @ xmath19 and @ xmath33 positions respectively . @ xmath34 represents the susceptance of the line @ xmath12 . on the other hand , if the @ xmath35 position corresponds to the line measurement at the @ xmath13 , we get @ xmath36 . in this case , without any errors , we can write equations for flow equations . @ xmath37 @ xmath38 is the identity matrix of susceptances of lines in @ xmath6 . we choose the rows of @ xmath10 so that the top @ xmath39 rows represent the lines with injection measurements . the @ xmath40 , consisting of the top @ xmath39 rows of the @ xmath9 identity matrix , represents these line measurements . for ease of computation and reference in later sections , we add the matrix to the @ xmath23 and make use of= @ xmath7 . then , we add the non - zero entries to @ xmath40 to make it a positive square root of length @ xmath7 . @ xmath41 on the other hand consists of the columns of @ xmath10 that correspond to the rows with the remainder . the generalized state - estimation @ xmath42 is obtained by computing the residual @ xmath43 . if the resulting state does not satisfy a certain condition , bad - data detection will go wrong and the recovery is performed using the residual . the combined process of residual and state estimation , followed by bad - data detection and recovery is called generalized state estimation ( gse ) @ xcite as described below : [ algorithm ] . [ algorithm ] * * note : * we assume that the adversary is unknown and has no information about the current breaker of @ xmath21 or the susceptance of @ xmath38 . for this , the adversary checks the breaker status of each breaker . the resulting breaker status value , after update , is given by @ xmath44 where the residual @ xmath45 has a value of @ xmath1 for all breakers . thus ,the initial flow measurements for this are denoted by @ xmath46 , with a value @ xmath47 and a value of @ xmath1 prior to the burst . let the initial flow as created by the breaker - jam ##ming be denoted by @ xmath48 , where @ xmath49 represents the flow . note that if the flow measurement on this line is not changed , its value remains the same during the attack . for ( [ flowmat ] ) , we have @ xmath50 it follows then that if the flow measurement on the @ xmath51 line with the ##mat is jammed ( @ xmath52 ) , to avoid confusion , the flow measurement has to be changed as well ( @ xmath53 ) . therefore , @ xmath54 represents the injection values ( @ xmath24 ) only , which are not changed during the attack . the initial attack leads to intersection of lines marked as starting from zero ( [ injmat ] ) , resulting in the following equation . @ xmath55 equation ( [ injcond ] ) this means that after the breaker - jam attack , for each injection value , the intersection of the values marked by lines with open points ( right )) , to be used for changes in the flow between lines ( relative to the reference bus ) whose signals are sent but whose control signals are not received ( see below ) . finally , for the speed ##up of the adversarial attack ( with one line acting as interfering with another in @ xmath2 ) we use @ xmath56 the necessary conditions for a successful collision - free attack that results in a change in the state vector consist of equations ( [ flowcond ] ) , ( [ breakjam ] ) , ( [ injcond ] ) , and ( [ phase ] ) . in the next section , we use a graph coloring based analysis of the necessary and sufficient conditions and use them to guide design of feasible attacks of our algorithm . for our graph coloring based attack , we use the graph coloring scheme : _ for each line @ xmath57 in the calculated state vector , all lines with same phase in @ xmath57 are the same value . _ following this , we will use a different graph coloring scheme to the design of the feasible attacks described in the previous section . equation ( [ flowcond ] ) means that if the flow between bus @ xmath12 and bus @ xmath13 and@ xmath14 is not jammed , @ xmath58 ( same color as our graph ) . thus , _ * the set of buses passing through lines with no flow measurements ( not attacked ) has the same color . * _ this means that the bus ##s , under a certain assumption , can be divided into groups , each group having a different color . the sets of buses of these groups do not have any flow measurements and are attacked by the adversary . the worst case is shown in figure [ 1 : graphcoloring ] . consider the lines with flow measurements , that are not attacked by the adversary . for an inner bus @ xmath59 , ( all the buses have the same color as itself ) , the right side of x ( [ injcond ] ) tends to zero . the left side is equal to one , under the ##ized assumption , if buses on lines connected to buses @ xmath59 are not jammed . thus , we have _ * a feasible attack set of buses with inner lines connected to interior buses . * _ a boundary bus is one that has two lines of color separated from itself . a bus @ xcite with flow measurements on boundary buses and flow measurements on buses @ xmath13 , @ xmath##14 and @ xmath59 . the black , grey and red lines are divided into groups and have equal amount of nodes @ xmath57 in the following table . the solid black lines represent control lines , the white lines represent control lines . the grey lines with red dots represent the nodes @ xmath60 and @ xmath61 with correct breaker . , scaledwidth = 42 . 0 % , scaledwidth = 42 . 0 % ] [ fig : graphcoloring ] next , consider the injection meters used at a boundary bus . injection meters can come in two forms : a ) connected to lines with incorrect breaker ( see node @ xmath13 ) ( [ fig : graphcoloring ] ) and b ) connected to other lines with correct breaker attack ( see @ xmath14 if node @ xmath61 does not have a breaker attack ) . in this case , using ( [ injcond ] ) , we have : _ * the color change made at a boundary bus has a dependence on the value of @ xmath57 for the two boundary buses . * _ for more information , we can use the same algorithm given in table 1 to obtain the reference color of @ xmath6##2 from @ xmath63 as follows : * 1 * . for each bus in , # ##bed lines without injection measurements with their lines connected into a supernode of that color . connect all lines with injection measurements into supernodes with the same color . connect supernodes of same color with two buses of same susceptance . * 2 * . for each bus with a line of two buses of same color , connect a line of same color with their inner supernodes . connect supernodes connected inside to inner supernodes of same color . * 3 * . make injection measurements at supernodes according to the values of the flows on lines with attack breakers connected to them ( positive for flow , negative for flow ) . if the same line has attack breakers , send the injection measurements to @ xmath2 . . the red , grey and black horizontal lines represent the flow for lines @ xmath13 , @ xmath14 and @ xmath59 . . the value on the three vertical lines is not positive for flow . the yellow lines with black dots , lines with attacked breakers , that represent the flow for supernodes @ xmath13 and @ xmath14 . , scaledwi##dth = 22 . 0 % , scaledwidth = 22 . 0 % ] [ fig : supernode ] figure [ fig : supernode ] is the reduced graph model for the graph . figure [ fig : graphcoloring ] . note that in the reduced graph @ xmath62 , only lines between buses of one color are included . the same lines exist between buses of different colors and are caused by missing line lengths . therefore , the corresponding equation ( [ injcond ] ) for boundary layers is not given by @ xmath57 and are ignored . the reduced graph , however , also includes lines from boundary layer models that are similar in form to that ( [ injcond ] ) as shown below : @ xmath64 ##a , @ xmath13 and @ xmath14 are supernodes of different colors . the corresponding value for the value of supernode @ xmath13 is given by @ xmath65 ( not the @ xmath19 value of @ xmath66 ) . @ xmath67 and @ xmath68 are the susceptance values and the weights corresponding to the reduced graph @ xmath62 . @xmath69 . the injection measurement of supernode @ xmath13 with is obtained by using @ xmath70 in the reduced algorithm above . note that equation ( [ reducedinjcond ] ) for the injection measurement contains elements of the susceptance and laplacian equations for @ xmath62 . the injection measurement of @ xmath66 for @ xmath62 in addition yields a state of @ xmath57 and @ xmath71 for the adversarial attack . we then arrive at equation ( [ unknown ] ) , allowing for accurate state estimates and a successful adversarial attack in terms of the state . the reduced algorithm @ xmath62 has simplified our estimation method . first , it is assumed that each color must represent at least one supernode and a single supernode ( of all colors ) with the coloring . then the state of @ xmath66 for that color will not be satisfying the injection measurement . this goes against principles of state estimation . note that the number of degrees of freedom of @ xmath66 ( for the state of @ xmath57 ) is always less than the number of states is even .consider the unique state value of @ xmath2 . for @ xmath62 , we have the following theorem about the maximum weights for state values . [ oneless ] for a np - free problem , the number of injection measurements at the grid buses should be strictly less than the number of injection measurements at the grid buses . let the number of connected edges be @ xmath72 . then the number of different groups in @ xmath66 is @ xmath73 ( the group in @ xmath2 ) . the total number of linear equations involving the different groups in @ xmath66 is equal to the number of injection measurements at the supernodes in @ xmath62 . for all state values , the number of injection measurements should either be less than or equal to @ xmath73 . we can see that only @ xmath73 injection measurements are required to find a solution to the estimation . consider the complete graph @ xmath62 . for straight - line susceptances and for graphs where the supernodes ' injection measurements do not form a complete graph with only connected edges ( see also [ see : supernode ] ) , the weight of @xmath73 flows are @ xmath73 and we use initial value constraints . if the input graph @ xmath62 is a complete ring of supernodes with # ##s , then the flows will contain the graph susceptance and the laplacian of the ring , that is , and . however , the large number flows of @ xmath74 that are on the right side of ( [ reducedinjcond ] ) and are formed from flows of , with no constraints , will not cancel out under normal operating conditions . therefore , the adversary of the flow is unaware of the actual operating conditions and will be unable to determine if they exist . thus the @ xmath73 flows are and will be completely random ( the attacker would know this under normal conditions ) . this is an example @ xmath66 and @ xmath57 for flows @ xmath72 with input graphs ##s . to illustrate , the following theorem and theorem [ oneless ] are the necessary and sufficient conditions for a successful anti - parallel attack using our graph - coloring approach . in the next section , we note that the graph coloring approach provides a useful tool that allows the analysis of thefeasible attack . we consider this element - of - attack only if it requires minimum number of breaker status changes ( despite the fact that doing so is much less energy intensive than simple attacks ) . if two attacks are performed with the same number of breaker changes , we consider as optimal the attack that requires the minimum number of breaker status changes . from the reduced graph @ xmath62 , we obtain the following formula for the minimum number of breaker changes required for a feasible attack under normal operating conditions ( non - zero real - world voltage susceptances and line flow that are required for all the attacks ) . [ oneenough ] if a feasible attack can be performed with @ xmath72 breaker status changes , then the feasible attack succeeds provided that all but one breaker change are converted back to their normal operating condition ( @ xmath1 ) , while leaving their line flow measurement unchanged . replace the reduced graph @ xmath62 with two new supernodes for the feasible attack with @ xmath72 breaker and line flow measurement unchanged . add the number of elements in front of in @ xmath57 and @ xmath75 . the value of @ xmath66 is therefore @ xmath##75 . by setting [ oneless ] , there are @ xmath76 ##1 measurements on the supernodes that have constraint equations entry in ( [ reducedinjcond ] ) . if we change the breaker status of the attacked node back to @ xmath1 while keeping the flow measurement jammed , the only change in the constraint equation ( [ reducedinjcond ] ) for that line will be that the injection measurement on the attacked node ( entry in @ xmath77 ) will be @ xmath2 . since all but one node are changed back to the original state , at least one injection measurement on @ xmath77 will still be non - zero and the @ xmath76 constraint equation will still have some inndependence . however , these changes will result in a new , non - zero @ xmath66 , leading to a new state . for example , consider the example in figure [ fig : graphcoloring ] where two breaker states are used . if the breaker status entry in @ xmath61 is changed back to @ xmath1 while keeping the flow measurement jammed , the resulting constraint equation that will be used is shown in figure [ fig : superno##de1 ] . as shown in figure [ oneenough ] , the above algorithm is not efficient and a non - trivial change in flow always occurs . coloring , shown in figure [ fig : graphcoloring ] , starts with line @ xmath61 , connected to a dotted red line . the red , white and blue colored lines represent the flows for lines @ xmath13 , @ xmath14 and @ xmath59 respectively . the flows on the dotted red line are all empty . the solid red line with a breaker represents the flow @ xmath60 with an empty bus . , scaledwidth = 20 . 0 % , scaledwidth = 20 . 0 % ] [ fig : supernode1 ] this makes a very large difference and starts the search for the optimal attack strategy . since the breaker change is trivial , the attacker can change a line from diagonal ( @ xmath7 ##1 ) , change its neighbors ( change the next line from diagonal @ xmath45 to @ xmath1 ) and change the flow measurements that need to be taken ( diagonal to diagonal @ xmath47 ) to achieve a successful attack . the breaker change that takes the least number of flow measurements( a is random @ xmath47 ) does not give the optimal attack . the set of jammed measurements , after fixing @ xmath45 , is known as ( [ opt _ attack ] ) . @ xmath78 this is used for solving ( [ opt _ attack1 ] ) where the jammed measurements ( with @ xmath1 on top of @ xmath47 ) are replaced with the non - zero values of @ xmath79 . @ xmath0 ##9 can be used to manually solve ( [ opt _ attack1 ] ) . since the attacker has no access to the optimal value of @ xmath21 , a is non - zero @ xmath21 ) , values for susceptance @ xmath38 are replaced with the jammed values . these values , under certain conditions , do not give the optimal attack but they give the maximum number of random variables as well ( [ reducedinjcond ] ) . @ xmath80 the injection constraint ( [ 0 ] ) is also used in the experimental setting and can be solved only after fixing @ xmath47 , for example . + * + : * we build our own code using ieee @ xmath81 and @xmath82 and other researchers @ xcite and publish their results in figure [ fig : topologyplot ] . for each test line tested , we take flow measurements on all lines and injection measurements on a subset of them , chosen randomly . to determine a possible attack on each line , we measure the breaker status and use ##r ( [ r _ attack1 ] ) to detect it and to avoid detection . this is done for each line to get the best response . in figure [ fig : topologyplot ] , note that the total number of flow measurements made increases with the number of injection measurements . this is due to an increase in the number of state transitions that cause the flow measurements . [ fig : topologyplot ] in this context , we study topology based cyber - attacks on operating systems where an adversary changes the breaker status of some lines and treats them as failures . the adversary then makes flow measurements on other lines to prevent detection at the system level . the attack framework is simple as it does not involve the integration of raw data into system or analysis of current state and past operating systems . using different information and hardware requirements than traditional network attacks , our attack framework includes attacks on systems where the system ##es is protected from data attacks . weprovide necessary and sufficient conditions for the design of optimal attacks using a circuit topology - based approach . the most important conclusion drawn from our work is that no topology based attacks exist that allow a circuit topology to fail . therefore , we need an optimal attack to protect power lines that are designed to prevent failure of the optimal attack . the problem is determined by analysis and ieee test results . designing optimal attacks for our security needs is the core of our current research . . . . j . ott , " with pjm : research , system design , and implementation " , _ ieee trans . security syst . 11 , no . 1 , 2003 . a . abur and a . a . expsito , " dynamic state estimation : theory and practice " , new york : marcel press , 2004 . j . smith , j . humphreys , and a . fansler , evaulation of the vulnerability of phasor control systems to " spikes " , _ ieee conference on network infrastructure _ _ y . liu , y . ning , and j . a . shepard , stop - start attacks against state machines in electric power systems " , _ proc . commun . _ _ a . vukovic , y . c . wang , a . dan, and a . sandberg , topology - based limitation of data integrity attacks on power system state estimation " , _ ieee _ " emerging technologies of energy _ , vol . 1 , no . 1 , 2012 . a . kosut , y . jia , a . j . lee , and l . tong , limitation of data integrity on power system state estimation " , _ proc . t . kim and m . kim , " protection against data integrity attacks on smart grid " , _ ieee trans . smart grid _ , vol . 1 , no . 1 , 2011 . d . deka , r . baldick , and s . vishwanath , data attacks and data integrity of the smart grid : research and analysis " , _ ieee annual _ conference _ , 2014 . x . xie , x . li , and a . sinopoli , " data integrity attacks on smart grid " , _ proc . ieee smartgridcomm _ , 2010 . t . kim and l . tong , " data integrity of the smart grid : data integrity and security " , _ ieee trans . soc . energy commun . 26 , no . 1 , 2013 . d . deka , r . baldick , and l. vishwanath , " power systems with smart meters : the case for circuit breakers and transformers " , _ ieee infocom ccses ##s _ , 2014 . a . giani , m . bitar , m . garcia , m . mcqueen , s . khargonekar , and a . poolla , smart grid " performance testing " , _ ieee trans . _ smart grid _ , vol . 1 , no . 1 , 2013 . a . abur and j . a . exposito , _ power system performance testing : principles and practice _ , crc , 2000 . " performance test automation " , http : / / www . science . informs . edu / en / pstca .