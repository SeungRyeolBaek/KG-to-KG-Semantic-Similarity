threshold nets are produced by combining a distribution @ xmath1 , from a distribution @ xmath2 , to weights of @ xmath3 , and to produce two distributions @ xmath4 and @ xmath5 whose combined weights exceed a certain threshold , @ xmath6 : @ xmath7 @ xcite . threshold nets can be made of ( partly ) any directed graphs , even scale - free , by simply combining the weights of @ xmath2 and the distribution @ xmath6 , and they have an extremely wide range of practical applications : from the neural network ( a simple linear " network of scale - free graphs " of a single node ) with a high number of nodes , @ xmath8 , to the neural network . used primarily by the graph - theory community @ xcite , they have also come to the attention of mathematicians and non - statistical scientists thanks to the pioneering work of hagberg , muller , and schult @ xcite . , and ( partly ) their easy construction , and modularity . nodes are ordered one at a time from bottom to top , @ xmath9 s on the top and @ xmath10 s on theid . , scaledwidth = 0 . 5 % ] hagberg _ et . _ . , note the fact that threshold graphs can be most efficiently represented by a two - way code , corresponding to two types of nodes , @ xmath9 and @ xmath10 @ xcite . when the nodes are created , according to the following procedure , nodes of type @ xmath9 connect to all of the other nodes , while nodes of type @ xmath10 connect to two of the others , of the type : @ xmath11 and @ xmath12 . in fig . [ 1 _ 1 ] ( 2 ) we present an example of the threshold graph constructed from the example @ xmath13 . in the _ _ _ ##ity of threshold graphs : a sequence of @ xmath14 and @ xmath10 s gives rise to an @ xmath15 - node , while nodes of a sequence of @ xmath9 s connect to @ xmath10 immediately after , but not among one another . we illustrate this modularity with a sequence of boxes ( corresponding to @ xcite ) : these boxes represent nodes of type @ xmath9, that are not connected among themselves , the two boxes of @ xmath16 - nodes of @ xmath10 - nodes @ xcite . a link between these boxes means that all of the nodes in one box are connected to all of the nodes in the other , etc . [ see _ connectivity ] ( 2 ) . given the definition of a threshold net , there are many algorithms to compute its computational properties , including : modularity , such as degree distribution , connectivity , betweenness ##es , and the coefficients and eigenvectors of the corresponding laplacian @ xcite . the algorithms are a fundamental part of connectivity and classification and their applications to data science and signal processing @ xcite . even more important , it is also possible to _ compute _ threshold nets with a given degree distribution , number of triangles , etc . , @ xcite . despite their name , threshold nets are finite in many important respects , for example their size is 1 / 2 , regardless of the number of nodes @ xmath3 . our approach consists of considering the general class of nets that can be constructed from one word ( or from two or more words ) , using rules of inference .their own language . it is also this language that gives the nets all their important properties : modularity ( as in everyday life complex nets ) , highly complex structural properties of the quality of structure and a high degree of compressibility . roughly speaking , each added letter to the alphabet allows for an increase of one letter in the net diameter , so that the two - letter nets possess diameter 2 or 3 ( most of the other types of two - letter nets possess diameter 4 ) . this modest amount is very modest , however , in view of the fact that the diameter of the everyday life complex nets is so much larger than that @ xcite . sequence nets gain so much insight into the types of nets that can be constructed in this simple language , while retaining much of the visual ##ity of complex nets . an important property of sequence nets is that every class of sequence nets has a natural order ; simply arranging them together corresponds to their size . we may use this order for describing structural and non structural properties of the nets . in this section , we make a brief look at the whole class of _ _ nets _ . in the [ two - letters ] we list almost all of the possible methods for constructing the sequence nets from the two - letter alphabet . .after this , we show that threshold nets are just one of the equivalence classes , characterized by the high degree of modular . we then compare the other equivalence classes , showing that even here there is a high degree of modularity and that the other nets can be computed independently . finally , the equivalence class of three - letter sequence nets can be reduced to a single class of threshold nets , where the threshold @ xmath17 , rather than the difference of the two , is the difference corresponding to the threshold @ xmath6 . in section [ 3 - 4 ] we discuss the three classes of the two - letter nets . these arguments lead us to the definition of several new equivalence classes . among these classes , we find a natural extension of threshold nets to three - letter sequence nets . in the same way , three - letter sequence nets still have many of the same properties of two and three - letter sequence nets . we also show that at least two of the three - letter sequence nets can be turned into threshold nets with _ 3 _ letters , instead of one . we continue with a definition and discussion of threshold nets in section [ 2 ] . the nets that can be computed from the @ xmath18 of the two letters @ xmath9 and @ xmat##h10 . we can treat each connected sequence as an @ xmath19 * * * * whose entries determine whether nodes of type @ xmath4 connect to nodes of type @ xmath5 : @ xmath20 if the nodes connect , and if otherwise ( @ xmath21 and for @ xmath22 , respectively ) . [ graph _ theory ] gives an example of the graph formed from the sequence @ xmath13 , using the _ threshold _ rule @ xmath23 . since each node can connect @ xmath24 or @ xmath25 independent of the others , there are @ xmath26 threshold ##s . we shall consider , first , the isolated nodes that fail to connect : @ xmath9 and @ xmath10 , @ xmath27 for they are self _ similarity _ graphs of the following types of nodes : @ xmath28 yields isolated nodes only , @ xmath29 yields one complete graph of type @ xmath9 and one of type @ xmath10 , @ xmath30 yields one complete graph of type @ xmath9 and two nodes of type @ xmath10 , etc . corresponding to the sequence @xmath13 ( a ) , and from @ xmath31 , to the non - inverted sequence @ xmath32 ( a ) , are shown . , scaledwidth = 0 . 5 % ] the list of connectivity rules can be obtained , by using two types of operations : ( a ) rotation , and ( b ) time reversal . _ rotation _ is the symmetry obtained by alternating between the two sets of vertices , @ xmath33 . similarly , the connectivity rule ( @ xmath34 and @ xmath35 ) applied on a reversed sequence ( @ xmath36 ) yields back the original graph @ xcite . _ time reversal _ is the symmetry obtained by taking the time ( " " ) of the connectivity rule , and taking the time of @ xmath37 . the connectivity rule applied to the inverted sequence @ xmath38 yields back the original graph . the two rotation groups have their own symmetry and they form a symmetry group . in fact , one can compare the two groups : the comparison with @ xmath34 applied to a reversed sequence with inverted sequence @ xmath39 yields back the original graph , .fig . [ time _ reversal ] . three of the four rules @ xmath40 are equivalent and generate threshold graphs . @ xmath41 is the rule for threshold graphs found by hagberg et al . , @ xcite , and @ xmath42 is applied to it by addition . @ xmath31 is obtained from @ xmath41 by time reversal and addition ( fig . [ time _ reversal ] ) , and @ xmath43 is obtained from @ xmath41 by time reversal . the two rules @ xmath44 are equivalent , by either addition or time reversal , and generate non - complete threshold graphs that are different from threshold graphs ( fig . [ abgraphs ] ) . the rule @ xmath45 generates complete threshold graphs . however , the complete threshold graph @ xmath46 can only be obtained by applying @ xmath47 to the sequence @ xmath48 of @ xmath49 @ xmath9 s followed by @ xmath50 @ xmath10 s , and the rule @ xmath51 generates a ` ` complete ' ' version of @ xmath47 . this couldnote that this is the case at the beginning , because of the two rules @ xmath52 , @ xmath11 : these define the order of the @ xmath9 s and @ xmath10 s as the same generating function as . by the same reasoning , @ xmath53 and @ xmath54 are different forms of @ xmath41 and @ xmath42 , respectively . they produce threshold graphs with the ordering of @ xmath9 s and @ xmath10 s . the two rules @ xmath55 are reversed , by either rotation or direction reversal , and produce non - threshold graphs , from threshold graphs and graphs generated by @ xmath47 ( cf . [ abgraphs ] ) . however , the rule @ xmath56 is a different form of @ xmath57 ( not @ xmath58 ) and produces the threshold graphs ( which are threshold graphs , since @ xmath59 is contained completely in @ xmath60 ) . , the rules @ xmath47 ( a ) , @ xmath41 ( b ) , and @ xmath57 ( c ) . by the order - 8 rule of( a ) and ( b ) : the graphs are the inverse , or complement of one another ( see below ) . the complement of the inverse graph ( a ) is called a ( two - letter ) threshold graph , starting from the above sequence and applying the rule @ xmath42 ( @ xmath41 , a ) . , scaledwidth = 0 . 5 % ] to this , @ xmath41 , @ xmath47 , and @ xmath57 are the only two - letter rules that distinguish two kinds of non - simply connected graphs . there is yet another important kind of rule : applying @ xmath47 and @ xmath57 to the same graph produces _ threshold _ , or _ threshold _ edges that are adjacent to the output graph if and only if they are _ threshold _ adjacent to the input graph . the color - space symmetry seen in the rules @ xmath47 and @ xmath57 ( @ xmath61 ) is also observed in the graphs they generate ( ex . [ abgraphs ] b , c ) . on the other hand , the complement of these graphs are also threshold graphs . however , the inverse of a similar rule applies to the complement ( a ) oftake back the previous representation . in this case , threshold graphs have no representation . @ xmath47 - graphs are typically more complex , and @ xmath57 - graphs are typically smaller than threshold graphs . the differences between representations of are @ xmath9 and @ xmath10 . ( b ) two different representations of the threshold graph @ xmath41 . the second and third representations are defined as # ##ing and # - ing , respectively . ( c ) graphs for @ xmath47 and @ xmath57 . show how they relate one another to the same set of rules . [ ( a ) . , scaledwidth = 0 . 5 % ] the same rules have an equivalent logical structure for threshold graphs , where the rules represent the letters of the latin alphabet , a directed graph , paths , etc . , from @ xmath9 to @ xmath10 is the path @ xmath52 , and a link of the graph to itself is represented by a closed - loop ( cf . [ directed _ link ] ) . because the rules are the same by number of rules , there is no need to simply switch the rules : all the isomorphs have the same type . the, order - reversal also implies that nets with two edges are equivalent to graphs . note that the order of self - edges is reversed in this case , so we can treat them as graphs . we shall make use of this fact , again , for the case of 3 - letter sequence nets in fig [ 3 - 4 ] . a very important property of sequence nets is the fact that a given set of sequence nets has a structural structure , by ordering the nodes , according to their sequence . in particular , consider for instance of the set of erds - rnyi ##r ##ᵢ of @ xmath3 nodes , where edges are associated with each @ xmath49 : there is an efficient algorithm to find the @ xmath62 nodes in the ensemble @ xcite . comparing this structural ordering against the structural structure of the nets yields the structural structure of the ensemble itself , giving new insight into the structure of the ensemble . as an example , in fig . [ eigs _ 2threshold ] we find @ xmath63 , the second largest node , for the set of all sequence nets in @ xmath64 . ( there are @ xmath65 nodes in the ensemble , since their edges can be( with the letter @ xmath9 ) . imagine the same pattern formed by the graph formed in this way , which is a tree , or a cayley graph : the edges of the first half of the vertices of the @ xmath1 - class intersect in the second half , and the pattern appears when we # ##ed into the graph . otherwise , go against their proper order . , scaledwidth = 0 . 5 % ] the structures of the two classes of two - dimensional sequence nets , @ xmath47 and @ xmath57 , are as easily obtained as for directed graphs . here we focus on @ xmath47 class , which is a class of directed graphs . the structure for @ xmath57 is very simple and it can be easily obtained from the structural properties of the two classes . all the sequence nets in the @ xmath47 class will start with the letter @ xmath9 and end with the letter @ xmath10 . a graph of this type can be represented better than @ xcite by the use of @ xmath9 s and @ xmath10 s in the lower class , @ xmath66 .we assume that there are @ xmath3 s and @ xmath14 s ( @ xmath14 is empty ) . we then use the numbers @ xmath67 and @ xmath68 for the total number of @ xmath9 s and @ xmath10 s , as well as @ xmath69 and above for @ xmath70 . finally , since all the nodes in each layer have unique addresses we replace any @ xmath9 in the @ xmath4 - th layer by @ xmath71 and any @ xmath10 in the @ xmath5 - th layer by @ xmath72 . with this assumption in mind we want to consider the following examples . : since @ xmath9 s connects only to preceding @ xmath10 s ( and @ xmath10 connects only to preceding @ xmath9 s ) the number @ xmath73 of the nodes is given by @ xmath74 : there are no nodes in @ xmath47 , so the number of the nodes is trivial . : any @ xmath9 s connects to the previous @ xmath10 , so thedistance between any two @ xmath9 s is 2 . if @ xmath10 is connected to the node @ xmath9 in the network , then the distance between any two @ xmath10 s is also 2 . the distance between @ xmath75 and @ xmath76 is 2 if @ xmath77 ( they connect together ) , and 1 if @ xmath78 ( @ xmath75 links to @ xmath79 , that links to @ xmath80 , that links to @ xmath76 ) . : because of the time - reversal relationship between @ xmath9 and @ xmath10 , it allows to create @ xmath10 s independently . the symbol for @ xmath9 can then be created by simply repeating the same process and adding the symbols . the distance betweenness @ xmath81 of each node @ xmath82 is defined as : @ xmath83 where @ xmath84 is the number of shortest paths from node @ xmath85 to @ xmath86 ( @ xmath87 ) , in the sense that @ xmat##h88 = @ xmath89 . @ xmath90 is the set of shortest paths from @ xmath85 to @ xmath86 that pass through @ xmath82 . the term @ xmath91 arises for these graphs since each layer is connected differently in the graph . the betweenness of @ xmath10 - can be changed from lower layers to upper layers recursively . consider the case of - for @ xmath92 and @ xmath93 for @ xmath94 . the second term of the graph stands for the shortest paths from the @ xmath95 to itself and the upper layers of @ xmath9 , and the third term refers to paths from @ xmath95 to @ xmath72 to @ xmath71 ( @ xmath96 ) to @ xmath97 . although this construction can be done , it is usually done in this form , and it also ignores the fact that the betweenness factor varies from one layer to the next . in other words , the nodes are _ _ _ , where _ _ @ xmath10 - _ contains _the examples are . : for simple example , for @ xmath47 , the coefficients are _ \ _ \ , and there seems to be no efficient way to compute them . instead , we rely on the two largest and largest networks , @ xmath63 and @ xmath98 , respectively , for their important network properties : the larger the network @ xmath99 the more susceptible the network is to attack @ xcite . consider also @ xmath63 . for @ xmath47 it is easy to see that both the _ edge _ and _ edge _ _ are equivalent to @ xmath100 . however , for the result of @ xcite , @ xmath101 the upper bound is correct and is a good approximation to @ xmath63 ( see ref . [ l2bounds ] ) . compare with @ xmath64 against their lower order ( straight lines ) , and their upper and lower bounds ( curved lines ) . , scaledwidth = 0 . 5 % ] for @ xmath98 , using version 2 . 2 of @ xcite we can compute the relation @ xmath102 .they do not prove very accurate , however . compared with the other properties of the graphs , and against their alphabet ordering , we have improved upon the case @ xmath103 where @ xmath104 is the maximum weight of the graph , see ref . [ l2approx ] . the result is good for the _ threshold _ graphs ( @ xmath105 ) and the approximation factor increases rapidly with @ xmath3 ; it is still about 40 % for @ xmath106 . compare with @ xmath64 against their alphabet ordering ( directed graph ) , and their maximum weight ( solid curve ) . , scaledwidth = 0 . 5 % ] . @ xcite it is known that these graphs have a mapping to the sequence net , with a unique node ( by the " prefix " @ xmath41 ) ; and that , for each @ xmath41 - like net , is a pair of pairs @ xmath107 of the graph ( not necessarily matched ) , such that for any two edges that match @ xmath7 to the sequence net . thus we have a unique mapping : @ xmath47 - ( ) @ xmath##57 - ) sequence nets and a special type of sequence net , where weight is determined by the rule @ xmath17 rather than the sum of the weights . we start with the assignment of a weighted set of nodes to an @ xmath47 - type net . suppose the set of @ xmath3 nodes has type @ xmath107 ( @ xmath108 ) , obtained from the probability distribution , and we define @ xmath109 , without loss of detail . choose nodes with @ xmath110 as type @ xmath9 and nodes with @ xmath111 as type @ xmath10 . then , choose the two nodes @ xmath4 and @ xmath5 that have @ xmath112 . the resulting sequence can be generated as a weighted set with the rule @ xmath47 , defined as follows . for example , define the set of nodes with @ xmath113 where the first @ xmath114 nodes correspond to @ xmath9 - nodes and the second to @ xmath10 - nodes . denote the resulting sequence by @ xmath18 and denote the @ xmath115 by the weight (example ( - ##code ) : set @ xmath116 , @ xmath117 for @ xmath118 , then : 0 . 4 cm if @ xmath119 0 . 4 cm set @ xmath120 and @ xmath121 0 . 4 cm else 0 . 4 cm set @ xmath122 and @ xmath123 etc . it is known that if the @ xmath124 is removed at the beginning of the sequence , the remaining @ xmath10 - weights are automatically added to the end of the sequence ( and not for the @ xmath125 ) . for example , using this method we find that the " - weights " , resulting from the sequence of weights @ xmath1261 , 2 , 3 , 5 , 8 , 12 , 18 , and @ xmath127 and @ xmath128 , can be obtained from the sequence @ xmath13 , with the rule @ xmath47 . consider also the following problem : given a sequence resulting from the sequence @ xmath18 with the rule @ xmath47 , we have a ( non - empty ) sequence of weights @ xmath##129 note that comparing any two layers with @ xmath112 results in the following result . convert from the chain rule into a compact representation @ xmath130 , and set weights @ xmath131 for nodes @ xmath9 in layer @ xmath131 , weights @ xmath132 for nodes @ xmath10 in layer @ xmath0 , and set the corresponding weights @ xmath133 . for example , the graph @ xmath13 has a compact representation @ xmath134 , with @ xmath135 weights , and the two @ xmath9 s in layer @ xmath25 have weights @ xmath25 , the two @ xmath10 s in layer @ xmath136 have weights @ xmath137 , the two @ xmath9 s in layer @ xmath138 have weights @ xmath138 , and the one @ xmath10 in layer @ xmath139 has weights @ xmath140 . the weights @ xmath141 , with the weights @ xmath142 , form the sequence above . the results obtained from the above@ xmath57 can be also mapped to difference threshold graphs in much the same way , except that the rule for comparing two graphs is called @ xmath143 , instead of @ xmath112 , and for @ xmath47 . the mapping of sequence rules to difference threshold graphs can be useful in the study of some of their properties , for example , for computing the _ isoperimetric index _ of a graph , @ xcite . with a three - letter rule , @ xmath144 , there are probably the most @ xmath145 sequence rules . however , these can be reduced easily , due to symmetry . because the alphabet only has 9 entries ( an odd number ) each rule can be mapped to its complement . however , we can restrict ourselves to rules with no more than 9 non - negative entries and no additional rules to extend their properties to the other . we can only find the complement of the sequence rules . in fig . [ 3nets ] we see the three three - letter rules with two , three , and four arguments . rules that apply to random graphs , and random graphs ( # # ##ing and self - reversal ) have been removed from the table . and @ xmath146) , and rules 2 , 6 , 13 , and 14 are special cases of rules 1 , 2 , 3 , and 6 , 7 . this leaves us with fifteen different three - letter rules ( s ) , and their corresponding extensions , for a total of fifteen different sets of three - letter threshold rules . , scaledwidth = 1 . 5 % ] rule 7 @ xcite is in fact relatively simple : for strings of strings @ xmath9 and @ xmath146 ( as shown in rule 8 of the algorithm ) we can easily see that the rule is equivalent to the three - letter rule 8 . in the same way , rule 7 is the same as the three - letter threshold rule 8 . rule 9 is a special case of this : because of the weak links @ xmath147 and @ xmath148 , the order in which @ xmath10 and @ xmath146 appear in the graph relative to one another is infinite . ( on the other hand , the order of the @ xmath10 s connecting to @ xmath9 s _ is _ infinite , since @ xmath9 s connects only to those @ xmath10 .that is , in the list . ) now , given a sequence we can extend it by applying to the @ xmath146 rules to the end of the sequence . if we then apply to , @ xmath52 and @ xmath148 , then we get the same result as from the original list and the rule above . the same result applies to sequences , and , that are all powers of 6 , 7 and 8 ( mod 8 ) , respectively . we are now left with only two distinct sequences with more than 10 letters . to these we should apply their complement , for a total of 10 distinct two - letter rules . note the application of , , and to two - letter threshold graphs . seems like a very good rule and we can rely on it in terms of our discussion below . since one can easily replace sequence ##by sequence is , and , , _ a posteriori _ , with a new rule that uses @ xmath149 ##s , it is convenient to include the ##s that tell one how to avoid connecting them from the list : noting that two - letter threshold graphs are connected if and only if their complement starts with @ xmath10 , deals with the problem more effectively . these rules arefor three - letter sequence nets , they are a bit more complicated . for example , three - letter rules associated with correspond to directed graphs if and only if they are : _ ( 1 ) the first a and the first c in the sequence appear before the first b . ( 2 ) the sequences must both end with _ _ . ( we assume that the sequence contains all three letters . ) for 1the rules are : _ ( 1 ) the first a in the sequence must appear before the first b . ( 2 ) the first a in the sequence must appear before the first c . ( 3 ) the first a in the sequence must appear before the first c , and there ought to be at least one letter between the two . _ _ rules exist for all the three - letter nets and can be determined by induction . the properties of three - letter sequence nets are important as well as those of two - letter nets , and we give , as an example , a few structural properties of these nets . we use a notation similar to that of the [ _ _ rules ] . : @ xmath9 and @ xmath146 nodes are the subgraphs , and @ xmath10 nodes belong to both the @ xmath9 nodes and @ xmath##146 ##2 . # the distances of the nodes are : @ xmath150 : since the @ xmath9 layers are a , complete for @ xmath151 , and complete for @ xmath146 , @ xmath152 . the @ xmath10 layers do not connect among themselves , but they do connect to the edges of the next layer ( which does not consist of @ xmath10 nodes ) , called @ xmath153 . for the distance of @ xmath9 s from @ xmath10 , we have @ xmath154 where @ xmath155 is the index of the first @ xmath9 - layer and @ xmath156 is the index of the second @ xmath10 - layer . the first line : since @ xmath10 s is not connected to the @ xmath9 s and @ xmath146 layers . the second , and third and fourth lines are shown in red . [ 2 ] a and b , respectively . the case @ xmath157 is the exact same way . however , in the other case one finds @ xmath158 - layer . ( 3 ) if@ xmath159 and the first @ xmath9 is above @ xmath72 the distance is 2 . ( 2 ) if the first @ xmath9 is above @ xmath72 , then the distance @ xmath146 will be 1 ( @ xmath10 needs to complete the sequence ) ; in that case if @ xmath71 is above the first @ xmath10 the distance is 1 , and then the distance is 2 . all the connected components of the above sequence are connected . , scaledwidth = 0 . 5 % ] : we have still no practical way to compute the distance , given the choice between one and two - dimensional space ##s . however , comparison of the ratios against the alphabet ordering of the nets once again reveals interesting statistical properties , and we can see that these can be used at the very least to obtain better algorithms and results . in fig . [ # _ r18 ] we use the ratio @ xmath160 for plots with @ xmath161 against their alphabet ordering . the @ xmath1 - case involves comparison of nets that are not connected : in this case @ xmat##h162 and above are also true . these sequences appear as gaps in the graph , for example , the largest gap in the graph corresponds to the sequences that begin with the weight @ xmath10 ( see also [ below ] ) . for sequences consisting of @ xmath161 sequences , against their usual order . find the gap on the edge , which corresponds to pairs of disconnected sequences . see also the following . this is equivalent to the rotational symmetry of the graph itself . , scaledwidth = 0 . 5 % ] each of the three - letter sequence nets can be converted to various types of threshold nets . for example , the following algorithm generates a _ _ _ - threshold net , corresponding to three - letter sequence nets generated by the algorithm . let the nodes be assigned weight @ xmath163 , from the probability distribution , and find the two nodes @ xmath4 and @ xmath5 that connect @ xmath164 with @ xmath165 . connect nodes with with @ xmath166 with @ xmath9 , nodes with @ xmath167 with @ xmath10 , and nodes with @ xmath168 with @ xmath146, we say that all @ xmath9 s connect to one another and all @ xmath146 s connect to one another . the @ xmath10 s do not , and @ xmath9 s and @ xmath146 s do not connect ; nodes of type @ xmath9 and @ xmath10 may or may not connect , and similarly for nodes of type @ xmath146 and @ xmath10 . to reflect the actual connections , the nodes of type @ xmath9 and @ xmath10 may be arranged in a sequence according to the direction of @ xcite , for the same result . then the nodes of type @ xmath146 and @ xmath10 may be arranged in a sequence , to reflect the actual connections , with the exact same result . because there are actual connections between @ xmath9 and @ xmath146 the two sequences can be easily compared . note , however , that when the @ xmath9 - @ xmath10 connection is made the direction of the @ xmath10 nodes is reversed , and the direction of connection between @ xmath146 and @ xmath10 ( @ x##math169 ( @ xmath170 ) is _ _ _ _ . in our example , the string is mapped to but not to . we have introduced a new class of nets , sequence nets , constructed from a set of letters and the language of grammar . two - letter sequence nets are sequence nets , and in particular are newly introduced classes . the class can be compared to " x - weighted " nets , where " @ xmath4 and @ xmath5 are equivalent if their weights " are @ xmath143 . this type of nets would be a very good model for political networks , where the nets may have political status , economic status , number of voters , etc . , and they tend to differ when they are compared in these cases . we have shown that the structural properties of the new class of two - letter sequence nets can be analyzed with ease , and we have shown an interest in classes of sequence nets that are useful for studying and analyzing their structural properties . we have also studied two - letter sequence nets , and looked at a few others , showing that they too can be analyzed easily . the diameter of sequence nets varies along with the number of letters in the alphabet and for a two - letter net diameter isusually 3 or 4 , compared to the full - size list . better results can be obtained with a simple calculation of the size . there are some interesting questions : using these methods we have managed to reduce the class of brute - leter types to about 3 types , but we have not ruled out the possibility that an arbitrary function could reduce the class size ; the problem of which sequences map to random pairs can be solved by solving for small samples , but we have no systematic way to solve the problem in general ; we have asked how to map sequence types to certain forms of _ ##s , in which case is such a mapping even possible ? is there a systematic way to find such nets for each given type ? ; what class of nets would exist if the type was mapped back to the @ xmath50 _ _ , instead of to _ all _ _ types ? etc . we hope to answer some of these questions in future papers .