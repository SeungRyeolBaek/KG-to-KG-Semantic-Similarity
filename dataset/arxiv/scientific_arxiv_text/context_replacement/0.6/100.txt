in the past decades , radio systems struggled with the problem of transmitting complex signals while maintaining low reliability . this problem has often been solved due to turbo codes unable to correct errors even at high signal to noise ratios . as pointed out in chapter 2 of @ xcite , most systems for radio communications use single or double byte turbo codes @ xcite and exploit their high error correction capabilities . however , due to the high computational complexity required to implement turbo codes , different systems ( e . g . @ xcite , @ xcite ) have been widely used . recently , several works study the parallelization of turbo code systems to achieve high performance . in particular , these works focus on eliminating , or reducing , the failure risk that comes with such systems ( e . g . @ xcite ) . although speed and reliability have been the primary factors for the performance of turbo codes , however , the need for different systems configured to support different operating modes , or at different frequencies , has changed the situation . in particular , the so called software defined radio ( sdr ) architecture makes possible a unique system @ xcite of radio systems , which can be configured to support a wide range of operating modes . more recent developments( e . g . @ xcite , @ xcite , @ xcite ) deals with the design of application - specific instruction - set protocol ( asip ) protocols for turbo communications . in order to implement protocols that offer both high performance and flexibility multi - asip is the ideal architecture . thus , combined with flexible and high performance processing elements , a multi - asip architecture should provide for a flexible and high performance abstraction layer . to that end , the network - on - chip ( nic ) architecture has been used to implement processing elements . turbo receiver designs designed to implement the protocols @ xcite , @ xcite , @ xcite , @ xcite , @ xcite , @ xcite . in general , standards and turbo receiver designs have the main goal of adaptively reducing the protocol complexity through the optimization of the packet data flow . this can be achieved by applying high - order probability - based techniques where multiple paths for many packets are avoided @ xcite . in @ xcite , @ xcite , @ xcite ##s , random path and token ring techniques are used whereas in @ xcite these techniques are applied to diamond and diamond .##ologies . net , in @ xcite ip and benes networks are considered , and in @ xcite binary de - bruijn networks are considered . however , none of these works provide a complete framework to design a ip based turbo link , with significant complexity / performance trade - offs . this work aims at filling this gap and presents three main approaches to the field of parallel turbo links : i ) a detailed analysis of ip based turbo links , implemented by means of a turbo link framework ; ii ) a summary of the results , including the complexity / performance trade - offs offered by the architecture , routing algorithms , routing and asip ##s . the paper is structured as follows : in section [ sec : ip _ c ] the concepts and requirements of a parallel turbo link architecture are discussed , whereas in section [ sec : routing ] ip based routing is introduced . section [ sec : routing ] extends the concepts discussed in these papers and presents binary de - bruijn and generalized kautz networks as possible alternatives for noc based turbo link architecture . in section [ sec : routing ] , new routing algorithms are introduced , whereas in section [ sec : tnoc ] the turbo link isas follows . section [ sec : co _ algo _ routing ] describes the details of the actual routing algorithms . in this section , section [ sec : routing ] describes the actual routing and section [ sec : concl ] reaches the details . a binary turbo ##gram can be implemented using @ xmath0 processing elements that need to read from and write to @ xmath0 memory . one processing element , usually referred to as soft - in - hard - out ( siso ) module , performs the bcjr algorithm @ xcite , whereas the others are responsible for distributing the binary information @ xmath1 among the sisos . the encoding process is sequential and thus , siso performs only the bcjr algorithm for the individual processing elements present at the encoder location ; for more information on the siso module the section will refer to @ xcite . as a result , each cycle is composed of two half cycles referred to as splitting and re - splitting . during each split , the binary information processed by siso @ xmath2 at time @ xmath3 ( @ xmath4 ) is sent to the module @ xmath5 at the time@ xmath6 , where @ xmath7 and @ xmath8 are combinations of @ xmath2 and @ xmath3 , from the above scheme ( @ xmath9 = interleaver ) , at the encoder level . thus , the time required to complete the encoding is directly proportional to the number of clock cycles required to complete a full iteration . without loss of detail , we can express the number of cycles required to complete a half iteration ( @ xmath10 ) as @ xmath11 where @ xmath12 is the total number of encoding steps in a given cycle , @ xmath13 is the number of encoding steps processed by each siso , @ xmath14 is the siso bit rate , or the number of encoded bits processed by each siso in a clock cycle , and @ xmath15 is the total frame rate . thus , the encoding time expressed as the number of encoded bits times the time required to complete the clock cycle is @ xmath16 where @ xmath17 is the encoding time , @ xmath18 is the number of bits , @ xmath##19 for binary codes and @ xmath20 for unsigned binary codes . when the first layer error is small with respect to the number of cycles required by the siso , we use @ xmath21 and , to achieve a high performance @ xmath22 and good error correction performance , the minimum number @ xmath23 of cycles should be used . the number @ xmath0 ( @ xmath24 ) to satisfy @ xmath22 with @ xmath23 , can be obtained from ( [ tab : tapprox ] ) for the asip ##s described in the table . if we use @ xmath25 , then use @ xcite , @ xcite , @ xmath0 , and [ 36 , 36 ] to satisfy @ xmath26 m / s ( see table [ tab : pasip ] ) . it is worth pointing out that the @ xmath27 values in table [ tab : pasip ] represent the minimum number of cycles required by the siso to satisfy the source code of each layer ( see table i in @ xcite and table ii in @ xcite ) . however , @ xmath28 only depends on thethe complexity of the siso and # ##o tends to increase with the overall complexity . as a result , several factors can significantly affect @ xmath0 , including 1 ) higher complexity with higher @ xmath15 ; 2 ) lower @ xmath29 ##0 ; 3 ) lower @ xmath22 ; 4 ) higher @ xmath23 ; 5 ) higher bit rate . however , we have as basis for this a much wider range for @ xmath0 : @ xmath30 . . it is possible to implement @ xmath26 bit / s for @ xmath25 with the asip results . in the table [ result = " ^ , ^ , ^ , ^ , ^ , ^ , ^ " , ] the degree and the complexity are not exactly known , but they are often compared with the # ##u and others due to the routing overhead . the most important conclusions that can be drawn from results in the [ tab : wimax _ results ] and [ tab : mhoms _ results ] are : 1 . the m - 1 routing solution is the best routing solution both in terms of speed and complexity when @ xmath31 . 2 . the routing overhead isof the the - ft algorithm ( see fig . [ fig : 1 ] ( 2 ) ) gets faster as @ xmath14 , and ssp values are the optimal values obtained for @ xmath32 and @ xmath33 . 4 . in most cases algorithms with @ xmath34 = 4 have higher performance with smaller load factor than algorithms with @ xmath34 = 4 when @ xmath35 . 4 . in most cases , the burger - bruijn and generalized kautz algorithms are the best known algorithms . for a further example , see fig . [ fig : r1 _ 1 - node ] , we compare the best results obtained with @ xmath31 and the - ft - algorithm for the wimax interleaver with @ xmath36 ( a ) and the mesh network interleaver with @ xmath37 ( a ) . each point is the throughtput and the result obtained for a given point with a certain value is @ xmath0 . points corresponding to the given @ xmath0 value are placed into the black box and a value is assigned to each point to determine the network topology , and they are separated by a - ., g - conical , h - conical , , and - conical kautz with the nodes @ xmath34 and ( 2 , k3 , k4 ) . as it can be seen , the kautz algorithms with @ xmath38 ( k4 ) are not the best way to achieve high performance with minimum area overhead . in fig . [ fig : fig _ node ] the results obtained from the [ tab : wimax _ results ] and [ tab : mhoms _ results ] are shown in table 1 . in general , for @ xmath31 the as - ft routing algorithm is the best solution , whereas for @ xmath39 ssp routing algorithms , such as in fig . [ fig : node ] ( c ) , fail to achieve the same performance as the as - ft routing algorithm with minimum area overhead ( see fig . [ fig : tar _ tar ] ( a ) and ( b ) for the wimax interleaver , @ xmath36 and fig . [ fig : tar _ tar ] ( c ) and ( d ) for the load balancing interleaver , @ xmath37 ) . an important problem that arises with the interleaver algorithm is theperformance improvements that can be seen in the table [ tab : mhoms _ size ] for @ xmath40 algorithm , but the area tends to decrease and thus @ xmath14 has the effect of providing the network with a performance improvement , even with a decrease of area . as an example , the typical kautz network with @ xmath41 and t - link routing algorithms is faster than 1 ##mbit / s with @ xmath31 , @ xmath42 , @ xmath43 . however , the network with the least improvement is the one achieved with @ xmath43 . the performance improvements of the @ xmath34 algorithm can be seen by showing that high values of @ xmath14 tend to increase the area . also , high values of @ xmath14 increase the output registers as shown in table [ tab : size ] , where the total size of the network is defined by the size of the individual blocks , including the input registers , the cpu ( cb ) , the output registers , the routing table / interface ( i / ba ) , the routing table ( 1 ##gp )and the minimum memory ( ram ) is used for three different values : the lowest area ( light - gray ) , the highest area ( dark - gray ) , and middle area ( dark - gray ) . for the @ xmath34 ##0 . 0 [ file : mhoms _ table ] . in this article a general framework to design based network - based turbo coding models has been developed . the general framework can be used to handle different networks , levels of complexity , message injection rates and routing algorithms . the results show that both burger - bruijn and von kautz models provide high performance with very low network overhead . therefore , depending on the particular network and network complexity level , message injection rates and routing algorithms can be used to reduce the network overhead overhead . m . giulietti , m . j . le perre , and j . wang , ` ` ' turbo coding interleavers : detecting errors in connections to wireless networks , ' ' _ iet _ net _ , vol . 11 , no . 4 , pp . 232234 , june 2002 . m . s . thul , j . wang , and m . wehn , ` ` a simple network architecture forhigh - speed turbodecoding , ' ' in _ ieee international conference on electronics , circuits and systems _ , 2002 , pp . 10991102 . a . neeb , m . a . thul , and r . wehn , ` ` system - on - chip - based approaches to design of high speed neural networks , ' ' in _ ieee international conference on circuits and systems _ , 2005 , pp . 17661769 . a . moussa , o . muller , a . baghdadi , and m . . jezequel , ` ` lucas and benes - based on - chip control systems for the turbo ##mata , ' ' in _ electronics , engineering and technology _ europe _ and asia _ , 2007 , pp . 654659 . a . benedetto , m . divsalar , g . montorsi , and g . pollara , ` ` multi - step input - output methods for the parallel and non parallel design of neural networks , ' ' _ ieee transactions on networks _ , vol . 11 , no . 4 , pp . 155172 , mar / apr 1998 . o . muller , a . baghdadi , and m . jezequel, ` ` asip - based _ soc ##s for turbo and multi - turbo codes , ' ' in _ design , implementation and testing _ international conference and exhibition _ , 2006 , pp . 13301335 . j . wang , m . baghdadi , and m . jezequel , ` ` ` higher performance algorithms for convolutional turbo codes , ' ' in _ ieee international conference on information and communication technology : from theory to practice _ , 2006 , pp .