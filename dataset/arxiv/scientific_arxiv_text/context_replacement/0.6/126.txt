the kakutani equivalence is one of the most important results in the theory of the orbit equivalence of continuous and compact measure preserving linear systems . in this article we consider the kakutani equivalence of the compact ##ness theory . a nearly continuous linear system is given by the measure @ xmath13 , where @ xmath2 is a probability measure , @ xmath14 is a borel probability measure on @ xmath2 , and @ xmath15 is an invariant measure or homeomorphism . note that the restricted orbit equivalence between continuous linear systems @ xmath13 and @ xmath16 has an invariant , non - continuous , and measure preserving measure @ xmath17 that maps sets to sets . a restricted orbit equivalence @ xmath18 is a _ restricted _ orbit equivalence _ if there are sets and @ xmath11 , @ xmath19 and @ xmath20 of equal measure such that @ xmath21 is a homeomorphism . the key result in this article is the famous result of keane and smorodinsky @ xcite that any two topological spaces of equal measure are finitarily equivalent , and ,that the map between them can be called a homeomorphism almost continuous . in a later paper , denker and keane @ xcite gave a general framework for continuous orbit equivalence ##s that also have a similar structure . we link the article to the paper of del # , rudolph , and weiss @ xcite for a more detailed discussion of the results . we should note here that interest in the orbit equivalence theory for this category was only recently stimulated by the work of hamachi and keane in @ xcite where they proved that the discrete and continuous sets are nearly continuous and equivalent . their results imply similar results for other kinds of sets ( in @ xcite , @ xcite , @ xcite , @ xcite , @ xcite , and @ xcite ) . these results were later proved as special cases of the # s theorem for this category , by del # and ahin @ xcite . at the same time that the nearly continuous # s theorem was proved , del ##bruck , rudolph , and weiss proved in @ xcite that if x does not satisfy the condition that the only sets of finite measure for which the orbit equivalence is a homeomorphism are @ xmath11 ##1 , then a continuous orbit equivalence .but not the same thing in the measure preserving sense . in particular , they showed that an orbit equivalence can be shown to be a homeomorphism on a set of full measure , but could not show that the set of full measure has a topological structure . the study of the topological structure of the theory is even more important for the study of even kakutani equivalence . note that in the usual sense the compact and compact measure preserving sets @ xmath13 and @ xmath16 have even kakutani equivalence if there is a compact orbit equivalence @ xmath22 , and an intersection @ xmath23 with @ xmath24 with the property that @ xmath25 is a linear combination of the two maps @ xmath7 and @ xmath26 . we call the orbit equivalence @ xmath6 _ _ even kakutani equivalence _ of @ xmath0 and @ xmath1 . it follows from @ xcite that an even kakutani equivalence can be shown to be a homeomorphism on a set of full measure . in the same way they showed that if one adds the additional condition that the maps @ xmath12 and @xmath27 be _ _ clopen _ , if is a set of measure one of an open set and one of a closed set , then there is a new invariant for the kakutani equivalence of nearly continuous linear systems , _ _ _ zero _ . they use this new invariant to show that nearly continuous even kakutani equivalence is stronger than measure zero even kakutani equivalence . the result they give is , in a sense , somewhat surprising , and raises the question whether there are many natural examples of nearly continuous systems that are nearly evenly kakutani equivalent or not nearly evenly equivalent . rudolph is looking for examples in the field of zero entropy loosely continuous systems . proved that any two zero entropy loosely continuous systems are nearly even kakutani equivalent . therefore , all natural examples of loosely continuous systems of functions , and adding machines , and in particular all such linear systems , are loosely equivalent . in @ xcite , roychowdhury and rudolph proved that any two adding machines are nearly continuous even kakutani equivalent . soon after , dykstra and rudolph proved in @ xcite that the real numbers are nearly continuously kakutani equivalent to the unit odome##ter . in @ xcite , new machines , called _ template _ , were used to construct the nearly continuous kakutani category . initially , they were constructed using the usual canonical tower structures found in adding systems . the authors of @ xcite showed that the template ##s could be adapted to the case where the adding system does not have a canonical tower structure . more recently , in @ xcite built on their work and used template _ to prove that all the categories of continuous topological spaces are nearly continuously kakutani equivalent to the binary category . salvi @ xcite adapted them to the case of @ xmath28 ##0 and used the machinery to prove rudolph ##ian one - sided convergence theorem for the corresponding continuous category . the proof given above has produced more complex and more difficult versions of it . on the other hand this paper has further established the usefulness and importance of the machinery . in this paper we extend the template machinery even further to prove our previous result : the complete adding system is nearly - continuously kakutani equivalent to the binary category . the use of the template machinery in this paper is designed to overcome the additional complication of the topological problems found in the type 1 minimal category . we extend the template##ization we see this is the best starting point to show more clearly that finite dimensional binary periodic systems are finite - dimensional kakutani equivalent to the binary lattice . here we see that this construction is a result of work that the first author started in 2009 while he was a post - doctoral student working with peter rudolph at michigan state university . the initial development of the construction and the final results were both done collaboratively by dykstra and rudolph . the second author continued the work after the unexpected death of rudolph in 2010 , and the result was published in 2014 . in this paper , leaving out important questions until later , we give an overview of the construction and describe it . let @ xmath29 be the binary lattice model and @ xmath30 the binary lattice . suppose that the system has a canonical structure , a sequence of clopen states that is given by the finite dimensional structure of the system . the morse function is rank one , so at each point the structure is given by a pair of towers . the function is rank two , so the sequence of states is given by a pair of two towers . the construction of the canonical structure is an explicit back and forthprocedure .thus , at each stage we need to define a set map from the levels of the tower of one system to the levels of the tower of the other system , changing the order and type of the set maps at each stage . the set map can be defined as the set of points for which our function will converge . in order for this set to be an @ xmath11 set , and the function to be a homeomorphism , for each stage where we expect , we need to have the function converge after a certain number of stages . in other words , once we have defined the set map at a particular stage @ xmath31 , we do not change the function at each successive stage . this causes an additional problem in the algorithm . at a particular stage @ xmath31 , we need to ensure that our choice of the set maps that the @ xmath31 makes will be consistent with the choices that we will make for the stages above . to avoid this problem , roughly speaking , we do not simply define a stage set map at each stage . instead , at each stage we choose a set of set maps that are linear combinations of the stage set maps , and that will converge to the function we call _ the _ _ _ .the decision therefore depends on us being able to make fewer choices at each stage @ xmath31 so that it is possible to make as many sets of choices at stage @ xmath32 that satisfy the @ xmath31 - 1 algorithm . they are a computational tool that has been developed to reduce the complex record management required to perform such a process . formally , _ template _ is an ordered multiset . for example , the multiset @ xmath33 , together with the set @ xmath34 , forms a template @ xmath35 , which we define as @ xmath36 the levels of the template ( with labels ) are called _ template _ . in our example , each level of the hierarchy will correspond to a clopen set that is a subset of the hierarchy . in fact , the towers themselves can be thought of as domains where each tower occurs exactly once and the ordering on the domain is exactly the ordering on the towers that is determined by the whole hierarchy . note that the set mapping from one tower to another can be thought of as a sub - set of the levels of the template , corresponding to the towers that they are being mapped to in the example above . we use the concept of a set .with images and images , where the sub - order is not given by the template , but by the order given by the original template . more generally , with intervals @ xmath35 and @ xmath37 , and @ xmath38 we _ _ _ @ xmath35 and @ xmath37 with the interval @ xmath39 \ subset { \ mathbb z } \ hspace { 1 cm } \ mbox { and } \ hspace { 1 cm } [ = [ 0 , 1 , \ ldots , [ - 1 ] \ subset { \ mathbb z } \ ] ] via the intervals @ xmath40 and @ xmath41 . the _ _ _ bijection _ is the explicit [ @ xmath42 $ ] , where @ xmath43 , @ xmath44 , and @ xmath45 have a bijection . this technique allows for an explicit mathematical description of how the intervals need to be constructed at one stage in order to construct maps from other stages , in different dimensions . it also allows for an explicit mathematical description of how maps from one stage are constructed from maps of a different stage , where it is possibleto show that the sequence has been solved for all is an @ xmath11 matrix of finite size . in our example we will use the infinite maps @ xmath46 , 48 for the above and " interval bijections and template sets that represent the back and forth " as shown in table [ thefigure ] 2 . the maps in the diagram are template ##s . the template sets on the left ( @ xmath47 , @ xmath48 , @ xmath49 , and @ xmath50 ) belong to the binary code system , and those on the right ( @ xmath51 , @ xmath52 , @ xmath53 , and @ xmath54 ) belong to the decimal system . the maps @ xmath55 are partial interval bijections . a key feature of the system is the _ _ infinite _ structure , as described by roychowdhury and rudolph in @ xcite . using the concept of towers as sets of objects that represent a finite sequence of steps , we see that each level at level @ xmath31 of the tower is a partition of a level from the given level above , and the level @ xmath56and @ xmath57 for the corresponding set map . the construction of the maps from one stage to another is done without assuming that on the other side , the partial interval bijections converge when starting with @ xmath56 and @ xmath57 . there are some important distinctions our algorithm makes and that of @ xcite and @ xcite in how we use maps from a particular stage to create other such maps . in particular , we do not use the notion of set that was used in the original paper , instead we use _ set maps _ . in addition , to study the combinatoric properties of the diagram of the c code , we created a new family of partial interval bijections , _ # ##s _ . as the family is built up , however , the argument that there is a well - known and complete kakutani algorithm is not identical to the one for both @ xcite and @ xcite . we include it here for clarity ( see also [ convergenceofpibs ] and [ kakequivalence ] ) . it is our hope that one day we will have a more powerful algorithm that could handle all kinds of problems , perhaps even deal with one . ". . . at the moment it is not clear how such a system , if it exists , could be sufficiently powerful to account for the differences between systems . the system is structured as follows : section [ basic ] : : we define the rules for constructing total and partial binary bijections that we will use in the diagram . section [ morsepreliminaries ] - [ binarypreliminaries ] : : we give detailed descriptions of the morse tower model and the binary system . in particular , we define the template sets @ xmath58 , @ xmath59 , @ xmath60 , and @ xmath61 , for @ xmath62 . these template ##s are represented by the elements of the binary system . section [ omegaksection ] : : we define the template sets @ xmath63 and @ xmath64 , for @ xmath62 . these are rules for the partial , that represent elements of the original system , and the operations that map morse towers to binary towers . section [ stage2 ] : : we define the @ xmath65 of the system by first constructing @ xmath66 , together with the partial .bijections @ xmath67 . section [ tksection ] : : we construct the data strings @ xmath68 and @ xmath69 , for @ xmath62 . these are the symbols for the morse tower , showing how radio towers can be converted to telephone towers . section [ sequence ] : : we construct the string @ xmath46 recursively . section [ freqnotation ] - [ stage8 ] : : we assume the diagram has been built up to stage @ xmath31 , where @ xmath31 is located , and decide how to build it up to stage @ xmath70 . because the result depends on whether @ xmath71 matches @ xmath72 , we proceed as follows : + * in sections [ freqnotation ] - [ blockpartitionsoftauhat ] , we define tools and code that are necessary for building stage @ xmath31 . * in sections [ thegoodset ] - [ stage4missingextra ] , we solve the @ xmath73 problem by building the diagram down to stage @ xmath74 . * in sections [ stage6bigp##icture ] - [ stage6missingextra ] , we solve the @ xmath72 problem by narrowing the diagram down to stages @ xmath75 . * in section [ stage8 ] , we show how the diagram grows to stages @ xmath76 . # [ convergenceofpibs ] - [ kakequivalence ] : : we use the structure of the diagram to show that our algorithm produces a nearly identical kakutani diagram of the two domains . in this section we describe the methods and tools used to find and solve partial interval bijections . [ domainandrange ] is a @ xmath35 and @ xmath37 , and [ partial interval bijection @ xmath42 $ ] from @ xmath35 to @ xmath37 , the _ domain _ of @ xmath77 consists of those levels in @ xmath35 that are represented by @ xmath12 . the _ domain _ of @ xmath77 consists of those levels in @ xmath37 that are represented by @ xmath27 . for the next section , see @ xmath78 for the domain which , like @ xmath37 , is thethen @ xmath79 . suppose there is a partial interval bijection @ xmath80 $ ] from @ xmath35 to @ xmath81 . suppose that @ xmath82 and @ xmath83 differ in their first three levels ( @ xmath84 , @ xmath85 , and @ xmath12 ) . [ 1 ] . @ xmath86 and @ xmath87 are two partial interval bijections , represented by @ xmath42 $ ] and @ xmath88 $ ] . then @ xmath77 and @ xmath89 _ equivalent _ if , for some in @ xmath90 , the level in @ xmath37 that is represented by @ xmath91 is equivalent to the level in @ xmath81 that is represented by @ xmath92 . two partial interval bijections are _ equivalent _ if one is a multiple of the other . more precisely , @ xmath93 \ sim [ i ' , j ' , o ' , o ' , o ' ] $ ] if they are @ xmath94 and @ xmath9##5 , @ xmath96 , @ xmath97 , @ xmath98 , and @ xmath99 . given the partial interval bijection @ xmath42 $ ] , the _ inverse _ of @ xmath77 is the partial interval bijection @ xmath100 $ ] . [ @ xmath101 $ ] for @ xmath102 are all partial interval bijections , and suppose that @ xmath103 and @ xmath104 arrive at @ xmath105 . define @ xmath106 and @ xmath107 . denote the _ inverse _ _ of @ xmath108 and @ xmath109 [ @ xmath110 , \ ] ] where @ xmath111 means that this is an inverse semigroup acting on the set of all partial interval bijections . also note that , if @ xmath108 and @ xmath109 are partial interval bijections , then so is @ xmath112 . for our purposes , the partial interval bijections may need to be simplified into the form @ x##math113 where @ xmath114 and @ xmath115 make up a very large part of the resulting data . we will refer to @ xmath114 and @ xmath115 as the _ bottom _ and _ top _ notes _ of @ xmath77 . the _ bottom _ of @ xmath116 . we will also need to put " partial interval bijections " . top and bottom sticky notes will be our way of doing this via the above example . [ overlapconcatenation1 ] for @ xmath101 $ ] for @ xmath102 . the partial interval bijections that are defined via ( [ stage2pibstructure ] ) for @ xmath117 if @ xmath118 , then . the _ bottom notes _ of @ xmath108 and @ xmath109 , by @ xmath119 , by @ xmath120 the sticky notes _ in the [ stickynotes ] will be used only in the initial stages of the algorithm . from then on , top and bottom sticky notes will _ interact _ with the data , so that a single partial interval bijectionthey need to be combined into the composition @ xmath121 where both @ xmath114 and @ xmath115 make up a very small part of the total composition . once again , we will refer to @ xmath114 and @ xmath115 as the bottom and top sticky notes , and @ xmath116 as the bottom , of @ xmath77 . once we get far enough along with the algorithm that the note will take the form ( [ stage4pibstructure ] ) , we will no longer be able to use the [ overlapconcatenation1 ] to join the interval bijections together . we will instead use the definition . [ overlapconcatenation2 ] [ @ xmath101 $ ] for @ xmath102 for the two interval bijections that are connected via ( [ stage4pibstructure ] ) for @ xmath122 if @ xmath118 , where is the _ _ map _ of @ xmath108 and @ xmath109 , and @ xmath119 , and @ xmath123 the _ _ map _consider a partial interval bijection of the form @ xmath124 $ ] . for all partial interval bijections , in this composition , each of the first two values has the same value . then it is possible to define two different maps , as follows . if @ xmath125 and @ xmath126 are two bijections , then , in the following list of functions , @ xmath127 is a bijection . then we can define @ xmath128 _ t with _ @ xmath129 to be the [ _ @ xmath130 $ ] . these functions can be used to move certain levels in the bottom part " of the template " to the top part , " by moving certain levels in the bottom part " " . for example , consider the function @ xmath131 and that of @ xmath132 " the top part " . suppose we want to move this top part up by two levels . we could do this , for example , by moving @ xmath133 and @ xmath134 from the middle part to the top part , as follows . _ @ xmath135 $] and replace @ xmath125 by @ xmath136 and @ xmath137 by @ xmath138 such that @ xmath139 is the ( old ) template @ xmath140 and @ xmath141 is the ( old ) template @ xmath142 we can then perform the substitution [ @ xmath124 $ ] with the explicit [ ] bijection @ xmath42 $ ] [ [ @ xmath143 $ ] , where @ xmath144 maps the offset of @ xmath145 to @ xmath27 . given a short string @ xmath146 of length @ xmath147 , the _ offset _ of @ xmath27 is the symbol @ xmath148 , where @ xmath149 if @ xmath150 and @ xmath151 if @ xmath152 . let @ xmath153 apply the same rule to the strings @ xmath105 and @ xmath154 followed by @ xmath155 and @ xmath156 . let @ xmath153then the system @ xmath105 produces , for each @ xmath157 , a sequence @ xmath158 of each @ xmath159 : @ xmath160 , that @ xmath161 and that @ xmath162 . the _ _ is the sequence in @ xmath163 whose total @ xmath159 words determine the code @ xmath164 . let @ xmath2 be the set of all the finite sequences @ xmath165 and @ xmath166 such that every finite subword of @ xmath167 counts as a subword of the resulting code . for @ xmath167 and @ xmath168 in @ xmath2 , then @ xmath169 if @ xmath170 ; finally , let @ xmath171 , where @ xmath31 is , observe that @ xmath172 for each @ xmath173 . then @ xmath174 produces a sequence in @ xmath2 that determines the borel - code @ xmath175 . the _ _ _ _ _ is , the sequence @xmath176 , where @ xmath177 is the right complete , and @ xmath14 ##6 the left complete ##ness borel probability distribution . the following examples are given by @ xcite . [ partitionprop ] for each @ xmath178 and @ xmath157 , there exists a unique partition of @ xmath179 into intervals of length @ xmath180 so that the subword of @ xmath167 on each interval of this partition is either @ xmath181 or @ xmath182 . [ partitioncor ] for each @ xmath178 and @ xmath157 , there exists a unique partition of @ xmath179 into intervals of length @ xmath159 so that the subword of @ xmath167 on each interval of this partition is either @ xmath164 or @ xmath183 . [ 0coordinate ] for @ xmath178 and @ xmath157 , partition @ xmath179 into intervals with a length [ partitioncor ] and let @ xmath184 be the interval occupied by @ xmath10##5 takes its place , @ xmath185 . the sets @ xmath186 are equivalent . for @ xmath178 and @ xmath157 , let @ xmath184 denote as defined in the [ 0coordinate ] . for @ xmath187 , let @ xmath188 denote the @ xmath189th symbol in @ xmath164 , and let @ xmath190 denote the @ xmath189th symbol in @ xmath191 . then both @ xmath192 and @ xmath193 . @ xmath194 and @ xmath195 are obtained by taking the clopen set where @ xmath196 and dividing it according to whether the symbol at the end is @ xmath105 or @ xmath154 . then @ xmath194 and @ xmath195 are clopen . these @ xmath180 cylinders , cylinders of finite length , are called the _ @ xmath147 - canonical cylinders _ _ @ xmath2 . we can now refer to @ xmath147 - canonical cylinders _ _ _ _ .denote the _ _ - canonical _ _ of @ xmath2 by : @ xmath197 and @ xmath198 such that the @ xmath147 - canonical template has level @ xmath159 . the order of the @ xmath147 - canonical template is exactly the order given by the height of @ xmath0 . the set of levels of the @ xmath147 - canonical template is a partition of @ xmath2 . to @ xmath199 . to @ xmath200 , each level @ xmath201 is a partition of the given set @ xmath202 . mapping @ xmath203 also gives the set @ xmath204 . note that @ xmath57 is # ##able in the sense that the measure of the # ##back of a point in @ xmath205 is the same as its height . consider three different versions of the @ xmath147 - canonical template : one in which the top layer is empty , a second in which there is an extra copy of @ xmath206 added on to the top , and a third in which there is an extra copyof @ xmath207 . return to the page . the names @ xmath208 , @ xmath209 , and @ xmath210 . use the " copy " , " copy of @ xmath206 " , and " copy of @ xmath207 " , respectively : @ xmath211 , @ xmath212 , and @ xmath213 by default . let @ xmath214 be the set of all the data stored at level @ xmath147 . then @ xmath215 . then @ xmath3 is complete and metrizable ; the system @ xmath216 , where @ xmath217 , determines the carry and determines the borel - measure @ xmath218 . replace @ xmath219 with @ xmath220 , where @ xmath221 and the addition are bit - wise and @ xmath222 with the multiplication . the _ _ _ _ of the system @ xmath223 , where @ xmath224 determines the - to - borel - measure . @ xmath##147 - canonical cylinder _ in the cylinder @ xmath225 , where @ xmath226 is a single element of the @ xmath147 . these @ xmath147 - canonical cylinders are the set of cylinders for the binary code . the _ 147 - canonical cylinder _ in @ xmath3 , called @ xmath227 , is the set of @ xmath147 - canonical cylinders , with the level @ xmath228 starting from the set of @ xmath1 , where @ xmath229 is an element of the first level . for example , the @ xmath230 - canonical cylinder in @ xmath231 in particular , let @ xmath232 be the @ xmath189 - canonical cylinder in @ xmath227 , such that @ xmath233 such that @ xmath227 has height @ xmath159 , and the set of levels in @ xmath227 has a height of @ xmath3 . in @ xmath234 . in @ xmath200 , each level @ xmath235 is a member of a higher level@ xmath236 . taking @ xmath237 back to the set @ xmath238 . note that @ xmath57 is # ##less in the sense that the size of the map ##back of the set of @ xmath239 is the same as its size . consider two different versions of the @ xmath147 - based set @ xmath227 : one in which the label @ xmath240 is removed , and one in which there is an extra copy of @ xmath240 added next to the label . the sets @ xmath208 and @ xmath241 may be called @ xmath240 " and additional copies of @ xmath240 " , so : @ xmath242 let @ xmath243 be the set of the modified canonical template for the @ xmath147 . set @ xmath244 , such that both @ xmath245 and @ xmath246 are the modified canonical template for the entire set ( but consisting of only the label ) as shown in the [ thefigure ] . the set of @ xmath6##3 and @ xmath247 , discussed in the [ omegakdefinition ] consist of elements of the following types : basic , extended , extended , canonical and null . we begin by describing these types of elements . the _ _ template _ at stage @ xmath147 is a template that meets one of the following conditions : it is level @ xmath159 ; its types are @ xmath147 - > ##ly ; and its creation is allowed " by the action of @ xmath1 . for the creation of a template @ xmath248 to be allowed " by the action of @ xmath1 , @ xmath248 must have one of the following properties . " there is a single basic template @ xmath249 that we can refer to as the _ _ - template _ , and for instance ( unknown ) @ xmath250 , @ xmath248 _ : @ xmath251 let @ xmath252 be the set of all basic elements for the _ template at stage @ xmath147 . for a basic template , the event @ xmath240 occurs once and only once . "this is the _ _ cut _ . if @ xmath253 is a basic template , define the _ successor _ template for @ xmath35 , denoted @ xmath254 , to be the basic template whose global cut is one position higher ( mod @ xmath159 ) , and define the _ successor _ template for @ xmath248 , denoted @ xmath255 , to be the basic template whose global cut is one position higher ( mod @ xmath159 ) . for example , if @ xmath253 reads : @ xmath256 and @ xmath254 is @ xmath257 and @ xmath255 is @ xmath258 in the basic template @ xmath253 , and an example , _ cut _ for @ xmath259 and @ xmath260 as follows : * @ xmath259 is @ xmath248 with the global cut reversed , and with the upper level left away from the top ( the level that would otherwise be the top level of @ xmath248 , or the pre - level of the top level of @ xmath248under the map @ xmath1 ) . * @ xmath260 is @ xmath248 with the global cut removed , and with an extra level added on at the top ( the level that would otherwise be the top level in @ xmath248 , and the level of the top level in @ xmath248 under the map @ xmath1 ) . for example , if @ xmath253 is given by @ xmath256 and @ xmath259 is given by @ xmath261 the " n " and " " change to " " and up " , respectively , for reasons that will be made clear later . let @ xmath262 be the set of all the template for the source code over time @ xmath147 . assume that the diminished template ##s @ xmath262 have replaced @ xmath159 . for a diminished template @ xmath253 , consider the new , _ , _ template as follows : * @ xmath263 is @ xmath248 with an extra level of the global cut , @ xmath240 , placed right next to the original ., , and with the top level deleted . * @ xmath264 is @ xmath248 with an extra element of the global cut , @ xmath240 , located right next to the original global cut , and with the top level deleted . for example , if @ xmath253 is given by @ xmath256 then @ xmath263 is given by @ xmath265 let @ xmath266 be the set of all augmented template for the binary tree at stage @ xmath147 . note that all augmented template in @ xmath266 have height @ xmath159 . given a basic template @ xmath253 , add an element , _ augmented _ template , in @ xmath267 , to the @ xmath248 with the top level deleted . for example , if @ xmath248 is the global - cut , then @ xmath268 let @ xmath269 be the set of all augmented template for the binary tree at stage @ xmath147 . note that all augmented template have height @ xmath270 . given a basic template@ xmath253 , adds a template , _ _ _ template , in @ xmath271 , to stage @ xmath248 with an additional additional template added immediately at the top ( the one that would normally be the canonical template ) . for example , if @ xmath253 is given by @ xmath256 and @ xmath271 is given by @ xmath272 let @ xmath273 be the set of all canonical modules for the canonical template in stage @ xmath147 . note that the canonical modules in @ xmath273 have height @ xmath274 . for @ xmath276 , note that the canonical modules in @ xmath277 have height @ xmath74 . for each canonical template @ xmath278 for the binary code , and for each template @ xmath279 for the binary code , we will have a partial binary bijection @ xmath280 from a subset of the levels in @ xmath281 to a subset of the levels in @ xmath248 . only after we have done this , we have athe bijections from the four basic types in @ xmath282 to the basic types in @ xmath283 . there are the four basic types of @ xmath284 : * @ xmath285 , * @ xmath286 , * @ xmath287 , and * @ xmath288 . for @ xmath289 and @ xmath290 , define @ xmath291 to be the [ binary bijection @ xmath292 $ ] , where : * @ xmath293 \ to { \ mathbb [ } $ ] , * @ xmath294 , * @ xmath295 , * @ xmath296 , and * * @ xmath297 is the binary bijection @ xmath298 . note that * @ xmath299 is mapped to @ xmath300 by a binary mapping of values to @ xmath179 . but of course @ xmath301 and @ xmath302 are defined in # ##ts because the values defined for @ xmath12 , @ xmath303 and @ x##math304 is defined . # # define [ domainandrange ] , where the domain and range of the binary binary bijection are defined . the following properties are defined . [ nobottomortop ] for the canonical template @ xmath278 , neither the bottom level nor the top level is in the domain of stage @ xmath305 . [ nobottomtoporcut ] for @ xmath306 , the right side of @ xmath248 is also in the domain of @ xmath305 . we define " the empty set " for stage @ xmath222 , and define the most important result ( section [ stage2goodsetprop ] ) , which is obvious at this point because @ xmath245 is the first canonical template . define @ xmath307 . use the canonical template @ xmath308 which is defined in section [ pkpi ] . we also define @ xmath309 . the result is obvious since @ xmath310 . [ stage2goodsetprop ] if @ xmath311 and @ xmath312 , then @ xmath313 is in the domain of stage@ xmath305 and @ xmath314 , and @ xmath315 . let @ xmath248 be the basic template for @ xmath284 . define @ xmath316 to match with @ xmath305 , and define @ xmath317 to match with @ xmath318 , as in example [ 1 ] . that these bijections are so called follows from : [ nobottomtoporcut ] ; for example , suppose @ xmath248 is matched with @ xmath319 where the box indicates the level that is in the range of @ xmath305 . then , using this " box " " to indicate the level in the range of the corresponding partial interval bijections , we define @ xmath320 @ xmath321 and @ xmath322 . assume that @ xmath323 , and the corresponding partial interval bijection , indicates : @ xmath324 that @ xmath325 matches with @ xmath317 is not a match : [ stage2diminishedmatching ] is the basic template @ xmath306 , @ xmat##h317 matches with @ xmath326 . both @ xmath317 and @ xmath326 are defined to match with @ xmath318 . then , for @ xmath306 , define @ xmath327 to match with @ xmath305 , and define @ xmath328 to match with @ xmath318 . that these relationships are true , follows from proposition [ nobottomtoporcut ] . [ stage2augmentedmatching ] in the data structure @ xmath306 , @ xmath328 matches with @ xmath329 . both @ xmath328 and @ xmath329 are defined to match with @ xmath318 . consider the two data structures @ xmath282 and @ xmath330 resulting in and . given @ xmath331 and @ xmath332 , we know from proposition [ nobottomortop ] and [ nobottomtoporcut ] that the top level of @ xmath281 is not in the range of @ xmath333 , nor is the top level of @ xmath248in the example above , if @ xmath334 $ ] , where @ xmath335 $ ] , then we may define @ xmath336 by @ xmath337 $ ] , where @ xmath338 $ ] . in other words , @ xmath339 is identical to @ xmath340 except that the upper level of @ xmath248 is slightly different . similarly , if @ xmath341 and @ xmath342 , if [ @ xmath334 $ ] , then we may define @ xmath343 by @ xmath344 $ ] , where @ xmath345 $ ] . in other words , @ xmath343 is identical to @ xmath280 except that there is technically an additional level at the bottom . similarly to @ xmath63 and @ xmath247 , the # ##s @ xmath68 and @ xmath69 , defined in the [ tkdefinition ] language , consist of all of the following types : basic , basic , augmented , augmented , and extended . we define these types here . # _ _ _ _ _template @ xmath147 is a template that meets the one of the following conditions : it has size @ xmath159 , its levels are @ xmath147 - # ##ly , and its ordering " allowed " by the action of @ xmath0 . for the ordering of " template @ xmath35 to be allowed " by the action of @ xmath0 , @ xmath35 must meet all of the following conditions : 1 . this is a special basic template we call the _ zero - template _ . 2 . this is a special basic template we call the _ one - template _ . 3 . [ fourforms ] for example ( 1 ) @ xmath250 , @ xmath35 ##2 one of the following basic template : @ xmath348 @ xmath349 @ xmath350 @ xmath351 let @ xmath352 be the set of the basic template for the following code . let @ xmath147 . for a basic template , suppose one of the levels is either @ xmath206 or @ xmath207 . call that template the _ _ template _ . if @ xmath##353 is a basic template whose global cut is neither the bottom level nor the top level , then @ xmath35 must be one of the basic forms defined in item [ fourforms ] of item [ morsebasictemplates ] 2 . in this case , define the _ first _ template for @ xmath35 , denoted @ xmath354 , to be the basic template of that same form whose global cut is one position higher , and define the _ successor _ template for @ xmath35 , denoted @ xmath355 , to be the basic template of that same form whose global cut is one position lower . for example , if @ xmath353 is the template @ xmath356 , @ xmath357 is @ xmath358 and @ xmath359 is @ xmath360 if @ xmath353 is the basic template whose global cut is the top level , then @ xmath35 is either the bottom - template or the top - template . in this case , define the basic forms for @ xmath35 , denoted @ xmath361 and @ xmath362 , as follows : * @ xmath##361 is @ xmath35 with the top level removed and @ xmath363 tack on at the bottom . * @ xmath362 is @ xmath35 with the bottom level removed and @ xmath364 tack on at the top . * in this case , define two successor template for @ xmath35 , denoted @ xmath365 and @ xmath366 , as follows : * @ xmath365 is @ xmath35 with the bottom level removed and @ xmath206 tack on at the top . * @ xmath366 is @ xmath35 with the bottom level removed and @ xmath207 tack on at the bottom . if @ xmath353 is a basic template whose global cut is the top level ( there are only two such a template ) , then define two successor template for @ xmath35 , denoted @ xmath361 and @ xmath362 , as follows : * @ xmath361 is @ xmath35 with the top level ( the global cut ) removed and @ xmath206 tack on at the bottom . *@ xmath362 is @ xmath35 with the top level ( the top level ) removed and @ xmath367 tack on at the bottom . also in this section , consider a _ predecessor template for @ xmath35 , or @ xmath355 , to be the basic template that is @ xmath35 with the top level removed , and with the level that would normally be the top level tack on at the bottom . for example , if @ xmath353 is @ xmath368 then @ xmath355 is @ xmath369 because some languages have multiple predecessor / successor template , while others have only one , the following examples can be used . if @ xmath353 is any basic template , then a _ predecessor template for @ xmath35 _ is any basic template of the form @ xmath354 , @ xmath361 , or @ xmath362 , as defined above . a template for @ xmath35 _ is any basic template of the form @ xmath355 , @ xmath365 , or @ xmath366 , as defined above . if @ xmat##h353 , a composite template , and the successor template for @ xmath35 agree in every level except possibly the bottom . therefore , all successor template for @ xmath35 agree in every level except possibly the bottom . for a composite template @ xmath353 that contains neither the one - template nor the one - template , consider the * , _ , _ of @ xmath370 and @ xmath371 as follows : * @ xmath370 is @ xmath35 with the global cut removed , and with an extra level tack on at the bottom ( the level that would naturally follow the top level ) . * @ xmath371 is @ xmath35 with the global cut removed , and with an extra level tack on at the bottom ( the level that would naturally follow the top level ) . for example , * @ xmath353 is given by @ xmath372 , the global cut is @ xmath207 , and the bottom level is @ xmath194 . the level that would naturally follow this bottom level is @ xmath373 . so the composite template @ xmath370 is given by@ xmath374 therefore , @ xmath353 is either the zero - template or the one - template . suppose there are two levels that could naturally follow the bottom level ( either @ xmath363 or @ xmath364 ) , as well as two levels that could naturally follow the bottom level ( either @ xmath206 or @ xmath207 ) . for this example , we have three possible scenarios , as follows : * @ xmath375 is @ xmath35 with the global cut ( which , in this case , is also the bottom level ) removed , and with the level @ xmath363 tack on in its place . * @ xmath376 is @ xmath35 with the global cut ( which , in this case , is also the bottom level ) removed , and with the level @ xmath364 tack on in its place . * @ xmath377 is @ xmath35 with the global cut ( which , in this case , is also the bottom level ) removed , and with the level @ xmath206 tack on in the place . * @ xmath378 is @ x##math35 with the global cut ( which , in this case , is at the bottom level ) deleted , and with the character @ xmath207 added on at the top . for example , if @ xmath35 is the zero template , then @ xmath376 is @ xmath379 . @ xmath380 is the sum of all the characters for the entire sequence of values @ xmath147 . assume that all the characters in @ xmath380 have value @ xmath159 . for the zero template @ xmath353 , define the _ , _ , _ characters as follows : * @ xmath381 is @ xmath35 with an extra copy of @ xmath206 inserted directly before the global cut , and with the bottom level deleted . * @ xmath382 is @ xmath35 with an extra copy of @ xmath207 inserted directly before the global cut , and with the bottom level deleted . * @ xmath383 is @ xmath35 with an extra copy of @ xmath206 inserted directly before the global cut , and with the bottom level deleted . * @xmath384 = @ xmath35 with the initial value of @ xmath207 inserted just below the upper minimum , and with the bottom level deleted . for example , if @ xmath353 is given by @ xmath356 and @ xmath381 is given by @ xmath385 let @ xmath386 be the set of all missing template for the morse system at stage @ xmath147 . note that all augmented template ##s @ xmath386 have height @ xmath159 . given a basic template @ xmath353 , define one additional , _ extra _ template , in @ xmath387 , to replace @ xmath35 with the bottom level deleted . for example , if @ xmath35 is the zero - template , then @ xmath388 let @ xmath389 be the set of all missing template for the morse system at stage @ xmath147 . note that all augmented template have height @ xmath270 . given a basic template @ xmath353 that is neither the zero - template nor the one - template , define one additional , _ extra_ 1 , use @ xmath390 , to define @ xmath35 with the first level tack on at the top ( the level that would normally be the first level ) . for example , if @ xmath353 is given by @ xmath391 and @ xmath390 is given by @ xmath392 if @ xmath35 is the zero - template or the one - template , we define the extra levels , as follows : * @ xmath393 is @ xmath35 with the level @ xmath206 tack on at the top . * @ xmath394 is @ xmath35 with the level @ xmath207 tack on at the top . let @ xmath395 be the set of the extra levels for the source code in , @ xmath147 . remember that the extra levels in @ xmath395 have been @ xmath274 . let @ xmath397 be a summable number . remember that we have @ xmath244 and @ xmath276 . then let @ xmath398 , @ xmath399, using the following two - step algorithm . pick @ xmath398 , for @ xmath31 ##0 , with @ xmath400 and @ xmath401 as equal . then choose @ xmath402 large enough so that @ xmath403 and pick @ xmath404 large enough so that @ xmath405 . pick @ xmath406 large enough so that @ xmath407 and pick @ xmath408 large enough so that @ xmath409 so that both ( [ m2choice ] ) and ( [ knplustwochoice ] ) are the same as ( [ m1choice ] ) and ( [ knplusonechoice ] ) , and with @ xmath398 , @ xmath400 , @ xmath410 , and @ xmath411 and with @ xmath400 , @ xmath401 , @ xmath412 , and @ xmath413 . then the table of the [ thefigure ] has been reduced up to just @ xmath31 , where @ xmath31 is even . now our algorithmof @ xmath400 and @ xmath401 from the [ table ] , we can add the sequence up to 1 @ xmath70 . the sequence is essentially the same whether @ xmath71 and @ xmath72 ; [ [ freqnotation ] - [ blockpartitionsoftauhat ] ] in either case . } @ xmath414 and @ xmath415 \ text { and } { ' = [ 0 , 1 , \ ldots , 2 ^ { k _ { n + 1 } } - 1 ] . \ ] ] define the _ base and _ base time points of @ xmath85 _ to be the subintervals @ xmath416 \ text { and } [ 2 ^ { k _ { n + 1 } } - ( 2 ^ { k _ { n + 1 } } + 2 ^ { k _ { n + 1 } } \ cdot 2 ^ { k _ { n + 1 } } ) , \ ldots , 2 ^ { k _ { n + 1 } } - 1 ] \ ] ] of @ xmath85 , etc . } ( [ knplustwochoice ] ) thethe safe zones are well - defined , and so ( [ m2choice ] ) the fraction of @ xmath85 in the global safe zones is less than @ xmath413 . next , define the _ left and top _ right _ of @ xmath417 _ to be the subintervals @ xmath418 \ text { and } [ 2 ^ { k _ { n + 1 } } - ( 2 ^ { k _ { n } } + 2 ^ { k _ { n } } \ cdot 2 ^ { k _ { n } } ) , \ ldots , 2 ^ { k _ { n + 1 } } - [ ] \ ] ] of @ xmath417 , etc . all the global safe zones are well - defined , and so the fraction of @ xmath417 in the global safe zones is less than @ xmath419 . let @ xmath420 be the result of the template ##s time @ xmath70 . fix @ xmath421 and @ xmath422 . fix the basic template @ xmath423 , replace @ xmath35 with the template @ xmath85 , andlet @ xmath424 be the point in @ xmath85 where the intermediate partition occurs . let @ xmath425 and @ xmath426 be such that @ xmath427 and @ xmath428 . then @ xmath429 . in this example we consider two instances of @ xmath35 , which we call the intermediate and local block partition of @ xmath35 . we also call the intermediate and local blocks of @ xmath35 . based on @ xmath430 , the _ intermediate _ partition of @ xmath85 _ is either ( [ simpleintblockpartition ] ) or ( [ complicatedintblockpartition ] ) if : if @ xmath431 , then @ xmath432 where @ xmath433 $ ] for @ xmath434 . if @ xmath435 , then @ xmath436 where : * @ xmath437 $ ] * @ xmath438 $ ] for @ xmath439 * @ xmath440 $ ] . whether the intermediate _ partition of @ xmath85 has the property ( [ simpleint##blockpartition ] ) for ( [ complicatedintblockpartition ] ) , the sub - intervals @ xmath441 are called the _ intermediate blocks in @ xmath85 _ . the _ intermediate block partition of @ xmath35 _ is called @ xmath442 or @ xmath443 depending on whether the intermediate block partition of @ xmath85 takes the form ( [ simpleintblockpartition ] ) or ( [ complicatedintblockpartition ] ) , respectively . either way , the sub - intervals @ xmath444 consist of those blocks in @ xmath35 that start in / from @ xmath445 , and are called the _ intermediate blocks in @ xmath35 _ . the intermediate block in the intermediate block @ xmath446 is called the _ intermediate block in @ xmath35 _ . [ jlocalblocks ] the _ intermediate block partition of @ xmath417 _ [ @ xmath447 where @ xmath448 $ ] for @ xmath449 . the sub - intervals @ xmath450 , each of which has one @ xmath451 , are thethe _ local blocks are @ xmath417 _ . [ localblocks1 ] if @ xmath444 has an initial value of height @ xmath452 , then the _ local block consists of @ xmath446 _ and @ xmath453 where the sub - blocks @ xmath454 consist of those values in @ xmath446 that come in order from @ xmath455 , and are called the _ local blocks of @ xmath446 _ . for each element @ xmath456 \ to { \ mathbb [ } $ ] of height @ xmath457 and @ xmath458 , then the subinterval of @ xmath84 consisting of the first @ xmath459 values in @ xmath84 by @ xmath460 ^ d $ ] and the subinterval of @ xmath84 consisting of the last @ xmath461 values in @ xmath460 _ d $ ] . thus , @ xmath460 _ d = [ \ setminus [ [ ] ^ d $ ] . [ jalocalblocks ] the_ local block sizes of @ xmath462 _ a $ ] and @ xmath462 ^ a $ ] _ { @ xmath463 _ a = j ' ( 1 ) \ cup j ' ( 2 ) \ cup \ cdots \ cup j ' ( l ' - c - 1 ) \ cup \ left [ j ' ( l ' - c - 1 ) \ right ] _ [ \ ] ] and @ xmath464 ^ a = \ begin { cases } \ left [ j ' ( l ' - c - 1 ) \ right ] ^ { \ cup j ' ( l ' - c ) \ cup \ cdots \ cup j ' ( l ' - c ) & \ mbox { if } a \ neq \ \ \ \ emptyset & \ mbox { if } a = 0 . \ begin { cases } \ ] ] the sub - blocks of the blocks ( [ j _ apartition ] ) and ( [ j ^ apartition ] ) are called the _ local blocks [ @ xmath462 _ a $ ] and @ xmath462 ^ a $ ] _ . if @ xmath431 , then @ xmath465 , thenthe local block partition ( [ local _ apartition ] ) of @ xmath462 _ 0 $ ] is identical to the local block partition ( [ jpartition ] ) of @ xmath417 . [ @ xmath466 _ 0 $ ] . the definition [ jlocalblocks ] is also a special case of definition [ jalocalblocks ] . [ localblocks2 ] . blocks of size @ xmath467 can only exist if @ xmath435 ; in this case , @ xmath468 and @ xmath469 are the top ##most blocks . then @ xmath468 with @ xmath462 _ 0 $ ] and @ xmath469 with @ xmath462 ^ 0 $ ] . consider the _ local _ partition of @ xmath468 and @ xmath469 _ b @ xmath470 _ a \ ] ] and @ xmath471 ^ c \ cup \ tau ( 0 , l ' - c ) \ , \ cdots \ cup \ tau ( 0 , l ' - c ) , \ ] ] where the sub - blocks of the block ( [taulpartition ] ) and ( [ tau0partition ] ) consist of those blocks in @ xmath468 and @ xmath469 that exist in isolation from the _ blocks [ [ @ xmath462 _ a $ ] and @ xmath462 ^ a $ ] , and are called the _ local cuts in @ xmath468 and @ xmath469 _ . a _ local cut in @ xmath35 _ creates a local block from either [ localblocks1 ] or [ localblocks2 ] . the _ local block structure of @ xmath35 _ is the partition of @ xmath35 into two local blocks . the local cut in a local block is called a _ local cut in @ xmath35 _ . note that the basic template @ xmath423 has four variation types : normal , extended , reduced , and extended . and for a single variation type , there may be multiple variants . so each basic template is created by applying one or more of the following operations to @ xmath35 : 1 . remove one level from the bottom of the local block in @ xmath35 , 2 . insert a new level from the bottom( or both ) of a local block , @ xmath35 . similarly , if @ xmath37 is a modified , reduced , extended , or modified version of @ xmath35 , then the intermediate and local block partition of @ xmath35 become intermediate and local block partition of @ xmath37 , as follows : 1 . suppose a level , @ xmath459 , is removed from the top of a local block @ xmath27 . let @ xmath472 be the intermediate block that contains @ xmath27 . then , in the intermediate and local block partition of @ xmath37 , replace @ xmath27 and @ xmath472 with @ xmath473 and @ xmath474 . leave all the intermediate and local blocks unchanged . 2 . suppose a level , @ xmath459 , is removed from the top ( resp . , bottom ) of a local block @ xmath27 . let @ xmath472 be the intermediate block that contains @ xmath27 . then , in the intermediate and local block partition of @ xmath37 , replace @ xmath27 and @ xmath47##2 with @ xmath475 and @ xmath476 , where , in the following example , @ xmath459 is the first ( resp . , bottom ) block of @ xmath475 . leave the other lower and intermediate blocks out . see the definition of the global map in the [ reorderingmaps ] . we can define two types of such maps : _ global _ and _ local _ . roughly speaking , the _ global _ _ map takes a finite number of levels in @ xmath35 that occur in order from the bottom global safe zone to @ xmath85 and moves them , one by one , up to the top global safe zone . this has the effect of moving the levels in @ xmath35 that do not occur in the " safe zone ( those in the safe zone " ) order . here is the full definition : the _ global _ map for @ xmath35 _ is the [ @ xmath477 $ ] where 1 . if @ xmath478 , then @ xmath479 and then @ xmath129 is the map . 2 . if @ xmath480 then @ x##math479 is defined such that @ xmath129 takes the top levels in @ xmath481 and places them , in order , just below the top levels in @ xmath482 . note that this way @ xmath129 takes the levels in @ xmath35 that do not occur in the global safe zones , to the @ xmath430 levels . } precisely when @ xmath480 , for each intermediate cut @ xmath445 , @ xmath85 , where @ xmath483 and @ xmath484 are the smallest and largest levels in @ xmath445 , respectively . for @ xmath485 , where , for @ xmath486 , @ xmath487 [ intcutspostp1 ] the intermediate cuts in @ xmath139 that do not occur in the global safe zones occur at levels in @ xmath85 that are equivalent to @ xmath105 and @ xmath452 . this follows directly from the definition and note that the intermediate cuts in @ xmath139 that do not occur in the global safe zones end up " with " cutsin the zero template @ xmath488 . this in turn means that the intermediate blocks of @ xmath139 that do not appear in the two - template will match up with the blocks in the zero template . if @ xmath431 , then the local block partition of @ xmath35 is given by ( [ simpleinttau ] ) and @ xmath489 . in this case we define the local block partition of @ xmath139 to be identical to the local block partition of @ xmath35 . for @ xmath490 ( 0 ) \ cup [ \ hat p _ 1 ( \ tau ) ] ( m ) \ , \ cdots \ cup [ \ hat p _ 1 ( \ tau ) ] ( m - 1 ) , \ ] ] where [ @ xmath491 ( 0 ) = \ cup ( l ) $ ] . in this @ xmath478 case we define the the local block partition of @ xmath139 to be identical to the local block partition of @ xmath35 ( m ( [ talltaupartition ] ) ) . similarly , for @ xmath434 , @ xmath492 ( \) = [ \ hat p _ 1 ( \ tau ) ] ( m , i ) \ cup [ \ hat p _ 1 ( \ tau ) ] ( m , i ) \ cup \ cdots \ cup [ \ hat p _ 1 ( \ tau ) ] ( m , i ' - 1 ) \ ] ] where : @ xmath491 ( m , i ) = \ tau ( m , i ) $ ] . now consider @ xmath435 , and that the intermediate block partition of @ xmath35 is denoted by ( [ complicatedinttau ] ) . then @ xmath129 takes the top levels of @ xmath481 and places them , in order , right after the top levels of @ xmath482 . now we denote the intermediate block partition of @ xmath139 by @ xmath493 ( l ) \ cup [ \ hat p _ 1 ( \ tau ) ] ( l ) \ cup \ cdots \ cup [ \ hat p _ 1 ( \ tau ) ] ( l ) \ ] ] where : * for @ xmath494 , @ xmath491 ( m ) = \ tau ( m ) $ ] , and *for @ xmath495 , @ xmath491 ( 0 ) $ ] is @ xmath446 with the top level inserted , and @ xmath491 ( 0 - 1 + a - 2 ) $ ] is @ xmath496 with the bottom level of @ xmath446 inserted at the top . if @ xmath435 and @ xmath494 , we define the local block partition of @ xmath491 ( 0 ) $ ] to be equal to the local block partition of @ xmath35 . similarly , if @ xmath497 , then the local block partition of @ xmath491 ( 0 ) $ ] is defined by ( [ tallinttaupartition ] ) . the local block partition of @ xmath491 ( m ) $ ] and @ xmath491 ( 0 ) $ ] are @ xmath498 ( l ) = [ \ hat p _ 1 ( \ tau ) ] ( l , 0 ) \ cup \ cdots \ right [ \ hat p _ 1 ( \ tau ) ] ( l , 0 ' - a - 2 ) \ cup \ left [ [ \ hat p _[ ( \ tau ) ] ( 0 , l ' - c - 1 ) \ right ] _ { \ ] ] and @ xmath499 ( 0 ) = \ left [ [ \ hat p _ 1 ( \ tau ) ] \ left ( 0 , l ' - c - 1 ) ] ^ { \ cup [ \ hat p _ 1 ( \ tau ) ] ( 0 , l ' - c ) \ cup \ cdots \ cup [ \ hat p _ 1 ( \ tau ) ] ( 0 , l ' - c ) \ ] ] where @ xmath491 ( l , i ) = \ right ( l , i ) $ ] for instance @ xmath189 . then , if @ xmath435 and @ xmath495 , we have the following two values of @ xmath491 ( 0 ) $ ] and @ xmath491 ( l - 1 + l - 1 ) $ ] . @ xmath500 ( 0 ) = [ \ hat p _ 1 ( \ tau ) ] ( m , 0 ) \ cup [ \ hat p _ 1 ( \ tau ) ] ( m , 0 ) \ cup \ cdots \ cup [ \ hat p _ 1( \ tau ) ] ( m , l ' - 1 ) \ ] ] and @ xmath500 ( l - a + m - 1 ) = [ \ hat p _ 1 ( \ tau ) ] ( l - a + m - 1 , i ) \ , \ cdots \ { [ \ hat p _ 1 ( \ tau ) ] ( l - a + m - 1 , l ' - 1 ) \ ] ] where : * for @ xmath501 , @ xmath491 ( m , i ) = \ tau ( m , i ) $ ] , * for @ xmath502 , @ xmath491 ( l - a + m - 1 , i ) = \ tau ( l - a + m - 1 , i ) $ ] , and * @ xmath491 ( m , i ) $ ] is @ xmath503 with the bottom level inserted , and @ xmath491 ( l - a + m - 1 , l ' - 1 ) $ ] is @ xmath504 with the bottom level of @ xmath503 inserted at the top . [ twocases ] is @ xmath491 ( m ) $ ]create an intermediate template for @ xmath139 that does not fall into the specified starting position . [ the blocks in @ xmath491 ( m ) $ ] are in the same order as those in the zero template @ xmath505 . the intermediate template where @ xmath506 . if @ xmath35 is an intermediate template then @ xmath507 ( m ) ) = \ zeta ( \ tau ^ \ star ( \ el ) ) $ ] . if @ xmath35 is an intermediate template then [ @ xmath507 ( m ) ) = \ zeta ( \ tau ^ \ star ( \ el ) ) $ ] . @ xmath507 ( m ) ) = \ overline { \ zeta ( \ tau ^ \ star ( \ el ) ) } $ ] . retrieved from the [ intcutspostp1 ] . in this example we define a version of @ xmath508 for each [ [ @ xmath491 ( m ) $ ] in @ xmath139 . we also define the _ _ _ template _ to be the same , for @ xmath128 ,of the map @ xmath508 ( either @ xmath509 or @ xmath510 ) . this is the default definition . [ intermediatereorderingmap ] based on whether @ xmath431 or @ xmath435 , and the _ _ _ ##s for @ xmath35 _ to be the maps @ xmath509 and @ xmath511 , respectively , where [ @ xmath512 $ ] is unique as well . if @ xmath491 ( m ) $ ] is an intermediate block in @ xmath139 that occurs in a global safe zone , then @ xmath513 $ . if @ xmath491 ( m ) $ ] is an intermediate block in @ xmath139 that does not occur in a global safe zone either , the @ xmath514 definition [ twocases ] describes the cases : 1 . if @ xmath507 ( m ) ) = \ [ ( \ star ^ \ star ( m ) ) $ ] , then @ xmath515 is the case . if @ xmath507 ( m ) ) = \ overline {\ hat ( \ tau ^ \ zeta ( l ) ) } $ ] , and @ xmath516 is chosen such that @ xmath508 takes the top levels in @ xmath491 ( m , l ) , \ ldots , [ \ hat p _ 1 ( \ tau ) ] ( m , 2 ^ { k _ n } ) $ ] and places them , in order , just below the top levels in @ xmath491 ( m , l ' - 2 ^ { k _ n } ) , \ ldots , [ \ hat p _ 1 ( \ tau ) ] ( m , l ' - 1 ) $ ] . this leaves all the other blocks covered by the @ xmath451 level . more precisely , for @ xmath517 , let @ xmath518 and @ xmath519 be the smallest and largest blocks in @ xmath520 , respectively . then define @ xmath521 where , for @ xmath522 , @ xmath523 , @ xmath525 and , depending on whether @ xmath431 or @ xmath435 , is the local ##ized ##o of @ xmat##h526 to be either @ xmath527 or , where , for [ @ xmath208 , @ xmath528 ( m ) \ n ) $ ] . for an intermediate block @ xmath529 and @ xmath526 , if @ xmath513 identity , then define the local block partition of @ xmath529 to be equal to the local block partition of @ xmath491 ( m ) $ ] . define the intermediate blocks of @ xmath529 as @ xmath530 , @ xmath531 _ b $ ] , or @ xmath531 ^ b $ ] based on the form that @ xmath532 ( m ) $ ] takes ( the two intermediate forms are described in definition [ p1hatpartitions ] ) . if @ xmath533 identity , then @ xmath534 , described in definition [ intermediatereorderingmap ] . in this example , define the local block partition of @ xmath529 to be @ xmath535 where : * @ xmath536 consists of the @ xmath451 - copies of @ xmath##529 that occur in positions from @ xmath537 $ ] in @ xmath417 ; * for @ xmath538 , @ xmath530 consists of the @ xmath539 consecutive levels in @ xmath529 that occur in positions from @ xmath540 $ ] in @ xmath417 ; * for @ xmath541 , @ xmath530 consists of the @ xmath451 consecutive levels in @ xmath529 that occur in positions from @ xmath542 $ ] in @ xmath417 ; * for @ xmath543 , @ xmath530 consists of the @ xmath544 consecutive levels in @ xmath529 that occur in positions from @ xmath545 \ ] ] in @ xmath417 ; and * @ xmath546 consists of the @ xmath451 consecutive levels in @ xmath529 that occur in positions from @ xmath547 $ ] in @ xmath417 . all the operations we have performed up to this point can be used to generate the higher order bijections from the[ thefigure ] . the global and local linear combinations in question are necessary to ensure the existence of " sets " . note from the above that these are values of @ xmath2 and @ xmath3 , for the stage of the algorithm in which all the above bijections occur . define the _ good set within @ xmath417 _ to be the level @ xmath548 _ to @ xmath549 . @ xmath550 consists of every possible good set in @ xmath417 that does not occur in the two other levels . for @ xmath551 , for @ xmath552 and @ xmath553 such that @ xmath554 ; we define @ xmath555 the _ good set within @ xmath85 _ to @ xmath70 _ . for @ xmath31 _ to @ xmath556 ( @ xmath557 ) we define @ xmath558 ( @ xmath559 ) to consist of those sets in @ xmath560 ( @ xmath561 ) that occur in order from @ xmath562. we call @ xmath563 and @ xmath564 the _ _ levels of stage @ xmath70 _ . note that , because the basic and global safe zones make up a very large part of @ xmath85 , @ xmath555 consists of about half of @ xmath85 . so @ xmath565 and @ xmath566 are both in @ xmath567 . [ everyotherproperty ] let @ xmath568 and @ xmath569 be the levels of @ xmath570 @ xmath571 , and of @ xmath572 @ xmath573 . let @ xmath574 and @ xmath575 be the levels that meet at stage @ xmath576 , @ xmath577 and @ xmath578 . let @ xmath579 . the global path structure is defined such that , after global insertion , the underlying data structures of the nodes end up outside of the global safe zone ( see also [ twocases ] ) . for the following example , if , after global insertion ,every local block that is not in the global safe zone matches the corresponding local block in the zero template , in the sense that it returns the same value as @ xmath580 . for the morse sequence , the exact matching algorithm is defined such that , after each initial and final matching , every complete local block that is neither in the global nor local safe zones moves on to become the complete local block . as a consequence of the combinatoric properties of the coordinate system , almost every other complete local block matches the corresponding local block in the zero template . to see why this is the case , consider the morse sequence and its inverse : @ xmath581 note that , if we rotate the sequence to the left of one coordinate , then it matches the original sequence in the other coordinate . the same would be true for pairs of local blocks ( by replacing @ xmath105 s and @ xmath154 s with respectively @ xmath582 and @ xmath583 ) . [ independenceofgoodsets ] let @ xmath584 be the sequence corresponding to @ xmath585 @ xmath586 . then @ xmath587 and @ xmath58##8 @ xmath589 and @ xmath590 are the products of @ xmath3 @ xmath591 . we can begin the proof with the case where @ xmath31 and @ xmath208 are equal to @ xmath556 . the following proof follows from . since @ xmath584 , we write @ xmath592 , where @ xmath593 . then @ xmath594 is divided into @ xmath145 and " of @ xmath51 : @ xmath595 where " @ xmath596 is a product of " @ xmath451 for each of @ xmath594 , and @ xmath597 for each @ xmath189 . because @ xmath598 is a union of all products from both @ xmath599 and @ xmath600 , we can write @ xmath598 as a perfect product @ xmath601 for each @ xmath602 . because ( [ qmpartition ] ) is obtained by adding and adding @ xmath51 @ xmath##145 ##0 , we have @ xmath603 , and also @ xmath604 , for example @ xmath189 . since ( [ gmdisjoint ] ) is a binary relation , @ xmath605 , @ xmath598 and @ xmath606 are equivalent . consider @ xmath607 and @ xmath608 . then the partial block sizes of @ xmath609 and @ xmath610 are @ xmath611 ^ { \ hat \ hat \ tau ( 0 , l ' - 1 ) \ , \ cdots \ hat \ tau ( 0 , l ' - 1 ) \ ] ] and @ xmath612 _ b , \ ] ] , in ( [ blockpartitionsoftauhat ] , and also ( [ localpartitionof0th ] ) and ( [ localpartitionoflth ] ) . note that the bottom bottom partial block in @ xmath526 has been @ xmath613 , i . e . , it is a _ b _ b . similarly , the two @ xmath614 blocks of @ xmath615 arealso thought of as the first @ xmath614 level of the set of levels @ xmath279 . define @ xmath616 if , then @ xmath617 if @ xmath618 , then define @ xmath619 . for @ xmath607 , in this way we have a set of partial interval bijections of the form @ xmath620 there will be one trivial partial interval bijection for each level @ xmath621 . we call @ xmath622 and @ xmath623 the _ bottom _ and _ top _ top _ of @ xmath624 . if @ xmath618 , then each @ xmath624 is defined on an interval of length @ xmath625 . similarly , if @ xmath608 , then each @ xmath624 is defined on an interval of length , @ xmath626 . if @ xmath618 , then define just one top sticky note and just one bottom sticky note , hence , the trivial partial interval bijection @ xmath93 $ ] where @ xmath629 . if @ xmat##h608 , then , for each @ xmath630 , define @ xmath631 . to correct this , since the data type of @ xmath248 does not work for our purposes , the form @ xmath627 does not allow operation on @ xmath248 . then , for each @ xmath632 , define @ xmath633 . the local block partition of @ xmath526 determines a partition of @ xmath635 $ ] into subintervals , which in turn determines a partition of @ xmath615 , which we call the _ block _ partition of @ xmath615 _ . the local block partition of @ xmath615 takes the form @ xmath636 where the @ xmath637 are naturally random combinations of blocks of @ xmath615 . if @ xmath618 , then , for each @ xmath189 , @ xmath638 determines a partition from @ xmath639 . in this case , for @ xmath640 if @ xmath608 , then for @ xmath641 , @ xmath##638 is a template from @ xmath639 . in this example , in @ xmath642 [ stage4matching ] let @ xmath643 be a template in @ xmath615 from the best level possible , @ xmath74 . then , given @ xmath568 and @ xmath569 in @ xmath644 , either : @ xmath645 and @ xmath646 are based on @ xmath313 , or else @ xmath647 . by convention , start with proposition [ everyotherproperty ] . it follows from proposition [ stage4matching ] that it is possible to extend the method of construction of @ xmath648 to a simple interval bijection , calling it @ xmath649 , for the positions of good levels in @ xmath650 and those positions in @ xmath526 that come in steps from @ xmath651 . similarly , the interval bijection can be repeated for all the positions @ xmath526 such that , with @ xmath568 and @ xmath569 , @xmath644 and @ xmath652 , @ xmath653 . similarly , with @ xmath654 where @ xmath655 is the mapping of @ xmath656 to the subinterval of @ xmath657 and to @ xmath658 . ( note that @ xmath655 is ill - defined because @ xmath656 is the level in of @ xmath659 . ) [ stage4nobottomortop ] neither the bottom level nor the top level of @ xmath615 is in the range of map @ xmath624 . with @ xmath624 of the map @ xmath660 followed by @ xmath621 , the bottom level of @ xmath615 appears as the level in @ xmath661 . but by setting [ nobottomtoporcut ] , this level is not in the range of the # ##4 of @ xmath662 . therefore it is not in the range of @ xmath622 . [ stage4nocut ] with @ xmath607 , the bottom level of @ xmath35 is inextends the definition of the @ xmath624 . follows from proposition [ nobottomortop ] . [ stage4matchingprop ] = @ xmath643 . similarly , given @ xmath568 and @ xmath569 , @ xmath644 and the interval bijections @ xmath663 and @ xmath664 of the form ( [ basicpibform ] ) , where @ xmath663 and @ xmath664 are based on @ xmath313 , and @ xmath665 . follows from proposition [ stage4matching ] , with the definition of the two interval bijections @ xmath624 . we also have references to normal , normal , extended , and variable values , and the set of values [ stage2diminishedmatching ] and [ stage2augmentedmatching ] , which are used to define properties of the [ possiblebodyoverlaps ] and [ bodyoverlapsvalid ] . # ##2 . for @ xmath607 that is neither the full - template nor the half - template , set @ xmath666 tomatch with @ xmath624 , and define @ xmath667 to match with @ xmath668 . then we see that the top and bottom of rows as well as the columns are grouped together . according to stage 3 , the reason that these relationships are used comes from : [ stage4nocut ] . if @ xmath607 is either the zero - template or the one - template , then for @ xmath331 , define @ xmath669 to match with @ xmath624 , and then @ xmath670 to match with @ xmath671 . [ stage4dimlemma ] if @ xmath607 is neither the zero - template nor the one - template , then @ xmath667 matches with @ xmath672 . if @ xmath607 is either the zero - template or the one - template , then for @ xmath331 , @ xmath670 matches with @ xmath673 . by default . for @ xmath607 and @ xmath331 , define @ xmath674 to match with @ xmath624 . if@ xmath35 is neither the zero - template nor the one - template , then define @ xmath675 to match with @ xmath668 . if @ xmath35 is the zero - template or the one - template , then define @ xmath675 to match with @ xmath671 . [ stage4auglemma ] given @ xmath331 , and @ xmath607 , if @ xmath35 is neither the zero - template nor the one - template , then @ xmath675 matches with @ xmath676 . if @ xmath35 is the zero - template or the one - template , then @ xmath675 matches with @ xmath677 . by default . for @ xmath678 , define @ xmath679 . note that , if @ xmath680 , then @ xmath681 . then @ xmath682 so that @ xmath683 , then @ xmath684 since , in particular , if @ xmath630 , then @ xmath685 , then @ xmath##686 . define @ xmath687 as well . for each @ xmath688 , define @ xmath689 , and , for each @ xmath690 , define @ xmath691 . define @ xmath692 . finally , for @ xmath607 that has neither the zero - template nor the one - template , define @ xmath693 . note that , if @ xmath694 , then @ xmath695 . if @ xmath696 note that , if @ xmath632 , then @ xmath697 . stage 6 is similar to stage 4 , but with an additional level of abstraction : whereas the maps in stage 4 are defined _ _ collections _ of maps from stage 4 , the maps in stage 6 will be _ _ collections _ of the maps from stage 4 . the top and bottom sticky notes defined in stage 4 are used to join these overlapping maps together . we need to ensure that there are enough sticky notes defined in stage 4 to start from and that these overlapping maps are well - defined . the first reord##ering [ in stage 6 , let @ xmath129 , exactly the same as we did in stage 4 and , of course , for @ xmath698 $ ] . in stage 5 , an intermediate block partition is also used to ensure that every single local block that does not occur in the null zone has the same value in @ xmath580 as the single local block in the sub - zone ( see proposition [ everyotherproperty ] ) . but this local block partition is not used in stage 6 because the map contains only one data block for each block not occurring . # in stage 7 , let the local block map @ xmath128 be called the map . for @ xmath699 , let @ xmath700 . denote the intermediate and local block partition of @ xmath701 , as well as the local block partition of @ xmath702 , in exactly the same way that they were used in stage 4 ( see proposition [ p1hatpartitions ] and [ blockpartitionsoftauhat ] ) except , of course , that @ xmath35 was replaced with @ xmath248 .define the initial map @ xmath703 and @ xmath702 , because the initial initial map @ xmath128 is not the same , just as in stage 6 , define the local block partition of @ xmath703 to be equal to the local block partition of @ xmath704 ( 1 ) $ ] . the initial set of @ xmath85 at stage @ xmath75 , @ xmath705 , is defined in section [ thegoodset ] . both @ xmath706 , and the _ good set at stage @ xmath75 _ , consist of those elements of @ xmath707 that follow in steps from @ xmath705 . assume that stage [ everyotherproperty ] occurs in stage 6 . in @ xmath699 , the sets @ xmath708 and @ xmath709 are defined similarly to the sets in section [ headsandtails ] ( now replace @ xmath35 , @ xmath248 , @ xmath66 , and @ xmath710 with @ xmath248 , @ xmath35 , @ xmath7##10 , and @ xmath711 , respectively ) . however , there is an additional bit of detail in stage 6 : if @ xmath712 ( or @ xmath713 ) , then @ xmath35 has head and tail maps of its neighbors , @ xmath714 and @ xmath715 . just like in stage 5 , for @ xmath699 , the partial interval bijections @ xmath305 take the form @ xmath716 where @ xmath717 is _ overlap ##s _ as defined in type [ overlapconcatenation1 ] . there is no other partial interval bijection for the map @ xmath718 . the maps @ xmath719 , @ xmath720 , and @ xmath721 are defined similarly to the maps between types [ stage4stickynotes ] and [ stage4bodymap ] except that in the case of @ xmath720 ( or [ stage4bodymap ] ) , pairs ( @ xmath722 ) are replaced with overlapping pairs ( @ xmath723 ) . we will thenthat the overlapping pairs of @ xmath720 can be added together . find @ xmath608 ( the fact that @ xmath618 are not overlapping ) . then , repeating what we found in the [ stage4bodymap ] , we expect @ xmath724 to take the pair @ xmath725 [ possiblebodyoverlaps ] with the pairs @ xmath726 from ( [ phiomegabodydecomp ] ) . in terms of the form ( @ xmath727 ) , the following overlapping pairs of overlapping pairs will be : 1 . @ xmath728 where @ xmath729 , 2 . @ xmath730 where @ xmath731 , 3 . @ xmath732 , where @ xmath331 and @ xmath733 , 4 . @ xmath734 , where @ xmath731 , 5 . @ xmath735 , where @ xmath341 and @ xmath733 , and 6 . @ xmath736 , where @ xmath731 . by 7 . [ bodyoverlapsvalid] in each of the four cases of the [ possiblebodyoverlaps ] , top and bottom sticky notes can be chosen so that the exact complement of the two partial interval bijections @ xmath737 is well - known . case 1 is trivial because partial interval bijections to the zero - and one - bits do not create sticky notes ( there is no template to worry about ) . for case 2 , note that if @ xmath306 has a single template from # ##1 such that @ xmath630 , then @ xmath632 as well , then we can define @ xmath738 together with itself by choosing from @ xmath739 without the template . for case 3 , note that there exists @ xmath306 such that @ xmath740 and @ xmath741 . if [ stage2diminishedmatching ] , note that there exists a bottom sticky note on @ xmath624 that agrees with the top sticky note on @ xmath742 . cases 4 - 5 are trivial . the proof shows that are well known . top and bottom sticky notes can be chosen so that the complement of @ xmat##h743 and @ xmath744 are well - defined . similar to the definition of the [ bodyoverlapsvalid ] . the following examples are similar to those from stage 4 . neither the bottom level nor the top level of @ xmath745 and @ xmath746 is in the domain of any @ xmath305 . follows from proposition [ stage4nocut ] . unlike @ xmath699 , the top level of @ xmath248 is not in the domain of any @ xmath305 . follows from proposition [ stage4nobottomortop ] . take @ xmath747 and let @ xmath748 be a point that lies at exactly @ xmath576 , where @ xmath331 . then , given @ xmath661 and @ xmath749 , @ xmath750 and the binary bijections @ xmath662 and @ xmath751 of the form ( [ phiomegabodydecomp ] ) , then @ xmath662 and @ xmath751 are based on @ xmath313 , and @ xmat##h752 . definition [ everyotherproperty ] can be used to show that term [ stage4matching ] holds in stage 5 ( with some notational modifications ) . the proof continues . the definitions of these two terms are identical to those in stage 4 . references to missing and missing levels are used to find the levels in stage 6 in cases where sticky levels have been removed or removed . definitions of terms [ stage4dimlemma ] and [ stage4auglemma ] hold in stage 7 , and are used to glue sticky levels together in stage 8 . the main parts of the proof have already been completed . stages @ xmath753 are analogous to stage @ xmath74 , and stages @ xmath754 are analogous to stage @ xmath75 . for a stage @ xmath76 , each of the ( subset of ) the two possible bijections in stage @ xmath755 is glued together by definition [ overlapconcatenation2 ] . for a stage @ xmath643 , definition [ stage4matchingprop ] shows that @ xmath756 has a level stage @ xmath277 that is, depending on which @ xmath757 is used . however , the [ stage4matchingprop ] uses in this case @ xmath72 , which allows us to define @ xmath758 to be the restriction of @ xmath759 to @ xmath606 . similarly , for @ xmath73 , we can define @ xmath760 to be the restriction of @ xmath761 to @ xmath606 . given @ xmath72 and @ xmath762 , let @ xmath763 denote the unique @ xmath398 - canonical cylinder in @ xmath3 that contains @ xmath764 . let @ xmath765 denote the set of @ xmath762 such that @ xmath766 for infinitely many @ xmath31 . similarly , given @ xmath73 and @ xmath178 , let @ xmath767 denote the unique @ xmath398 - canonical cylinder in @ xmath2 that contains @ xmath167 . let @ xmath768 denote the set of @ x##math178 states that @ xmath769 for infinitely many @ xmath31 . the sets @ xmath770 and @ xmath771 are @ xmath11 sets of finite size . by definition [ independenceofgoodsets ] , the sets @ xmath606 for @ xmath72 are closed with respect to @ xmath224 . given @ xmath772 , the borel - cantelli theorem . therefore , the sets @ xmath606 are closed , and @ xmath770 is an @ xmath11 subset of @ xmath3 . the answer for @ xmath771 is 1 . [ containmentlemma ] for @ xmath773 , if @ xmath72 and @ xmath774 and @ xmath775 are sets such that @ xmath776 , then @ xmath777 . then , if @ xmath73 , @ xmath778 , @ xmath779 , and @ xmath780 , then @ xmath781 . then @xmath782 , the map @ xmath624 at stage @ xmath783 is an example of a sequence of the maps @ xmath624 at stage @ xmath31 it follows that @ xmath784 where , depending on the context , @ xmath57 corresponds either to the map @ xmath785 or to the map @ xmath786 . the definition when @ xmath73 is not exact . given @ xmath787 , let @ xmath788 be the increasing sequence of indices , each corresponding to @ xmath585 , such that = @ xmath789 . then , by the [ containmentlemma ] , the maps @ xmath790 are a decreasing sequence . it follows that there is a unique point in the intersection @ xmath791 . therefore , if @ xmath792 is the increasing sequence of indices for @ xmath793 , then there is a unique point in the intersection @ xmath794 . this gives the following result . for @ xmath793 , then @ x##math795 is the unique point in the intersection @ xmath794 . choose @ xmath787 , let @ xmath796 be the unique point in the intersection @ xmath791 . the examples @ xmath6 and @ xmath797 are used in the following sections : @ xmath770 and @ xmath771 . choose @ xmath793 and @ xmath798 . choose @ xmath73 large enough so that @ xmath799 and so that @ xmath800 . choose @ xmath801 large enough so that @ xmath802 implies @ xmath803 . in particular , @ xmath802 implies @ xmath804 . it also follows from the [ containmentlemma ] that , for all @ xmath773 such that @ xmath805 , @ xmath806 and , for all @ xmath807 such that @ xmath808 , @ xmath809 and @ xmath810 the intersection of @ xmath797is defined as . the sets @ xmath6 and @ xmath797 are vector spaces . consider a natural number @ xmath811 and a set @ xmath459 for @ xmath594 . we want to prove that @ xmath812 . for @ xmath813 , define @ xmath814 where @ xmath56 is the set @ xmath815 . then @ xmath816 and @ xmath817 . note that @ xmath818 is defined as the [ thegoodset ] , for example @ xmath31 , @ xmath819 consists of about half of the levels in @ xmath820 , so we can ( also ) prove @ xmath819 consists of at least @ xmath821 of them . define @ xmath822 for @ xmath823 , let @ xmath824 be the set of levels in @ xmath820 that are equal in distance from @ xmath825 , and recursively define @ xmath826 and @ xmath827 . note that @ xmath828and @ xmath829 ( however , @ xmath821 has a much lower value that is much closer to @ xmath830 ) . it follows from ( [ dnequation ] ) and ( [ dnminusaequation ] ) that @ xmath831 this also follows from ( [ enequation ] ) and ( [ enminusaequation ] ) that @ xmath832 this implies that @ xmath833 and @ xmath834 and @ xmath835 . this is true for . and @ xmath836 this implies that @ xmath837 . if @ xmath793 and @ xmath838 , then @ xmath839 . similarly , if @ xmath787 and @ xmath840 , then @ xmath841 . if @ xmath798 and then @ xmath73 be such that @ xmath842 and @ xmath843 . let @ xmath844 be such that @ xmath845 . then @ xmath846 where , depending on the context , @xmath57 belongs either to the map @ xmath847 or to the map @ xmath848 . since @ xmath849 , we have @ xmath850 , which is @ xmath851 . then @ xmath852 . the second result is proved below . let @ xmath853 , @ xmath854 and @ xmath855 be all @ xmath11 sets of finite size . then @ xmath856 and @ xmath857 . then @ xmath9 and @ xmath10 are both measure preserving because @ xmath6 is measure preserving . and @ xmath9 and @ xmath10 are @ xmath11 invariant because @ xmath6 is invariant under the partial measures of @ xmath854 . in this case we have that @ xmath9 and @ xmath10 are equivalent and that @ xmath4 has an additional property that is a conjugacy when applied to @ xmath858 , the smallest set on which @ xmath222 . [ orbitsintoorbits ] for @ xmath859, @ xmath6 maps the @ xmath0 - orbit of @ xmath167 into the @ xmath1 - orbit of @ xmath795 . and for @ xmath860 , @ xmath797 maps the @ xmath1 - orbit of @ xmath764 into the @ xmath0 - orbit of @ xmath796 . pick @ xmath861 and @ xmath862 for each @ xmath863 . suppose that the tower of local blocks of each @ xmath31 contains some @ xmath864 . pick @ xmath865 such that @ xmath866 and @ xmath867 . then @ xmath868 and @ xmath869 are in the same orbit as @ xmath870 and @ xmath871 . then , since each @ xmath872 consists of two local blocks from each @ xmath755 , for each @ xmath873 ( @ xmath73 ) such that @ xmath874 , we pick @ xmath875 and @xmath876 . then to @ xmath31 . for @ xmath877 , let @ xmath878 be such that @ xmath879 . let @ xmath880 be such that @ xmath881 and @ xmath882 . let @ xmath883 ( @ xmath884 ) such that @ xmath885 . for @ xmath877 , let @ xmath886 be such such that @ xmath887 . then because the pseudo - bijections @ xmath305 at stage @ xmath208 are products of products of those at stage @ xmath31 , we have @ xmath888 . since @ xmath208 is unique , it follows that @ xmath889 . then @ xmath6 maps the forward @ xmath0 - orbit of @ xmath167 into the @ xmath1 - orbit of @ xmath795 . by this reasoning , @ xmath6 maps the backward @ xmath0 - orbit of @ x##math167 into the @ xmath1 - orbit of @ xmath795 . the statement for @ xmath797 is not true . we have already shown that @ xmath9 and @ xmath10 are @ xmath11 points of mirror symmetry . let @ xmath892 . then @ xmath859 and @ xmath893 . now let @ xmath894 for all @ xmath895 . then @ xmath896 because @ xmath854 is @ xmath0 - invariant . and @ xmath897 . and [ orbitsintoorbits ] ( and because @ xmath893 ) . let @ xmath898 , so @ xmath9 is @ xmath0 - invariant . then , @ xmath10 is @ xmath1 - invariant . now , @ xmath764 is a point in the @ xmath1 - orbit of @ xmath795 . then @ xmath899 , so @ xmath796 is in the orbit of @ xmat##h167 . = @ xmath840 . hence @ xmath6 maps the orbit of @ xmath167 onto the orbit of @ xmath795 . the map @ xmath6 is a conjugacy between the two induced maps @ xmath900 and @ xmath901 . therefore @ xmath858 and @ xmath902 are nearly clopen . therefore @ xmath6 is a nearly closed kakutani map of @ xmath0 and @ xmath1 . let @ xmath868 and @ xmath903 be two copies of @ xmath904 . then , by definition [ x0theorem ] , @ xmath905 for all @ xmath906 . we want to show that @ xmath907 and @ xmath147 have the same orbit . this will show that @ xmath6 corresponding to @ xmath904 is order preserving on x , and is a conjugacy between the induced maps . as we see in the proof of theorem [ orbitsintoorbits ] , @ xmath908 for some sufficiently large @xmath73 . let @ xmath909 be one among stages @ xmath31 . if @ xmath910 , then @ xmath907 and @ xmath147 will have the same stages because the partial interval bijection @ xmath305 in stage @ xmath222 changes the points of @ xmath858 in an order - preserving way , and this is not entered into the table via parentheses . if @ xmath911 , then because @ xmath909 is reversed , @ xmath912 and @ xmath913 will be two different stages of @ xmath914 . and the partial interval bijections at stage @ xmath909 are products of products of those at stage @ xmath915 . so if @ xmath863 , then the stage - ( @ xmath915 ) partial interval bijection that acts on @ xmath868 in stage @ xmath909 is before the stage - ( @ xmath915 ) partial interval bijection that acts on @ xmath869 in stage @ xmath##909 . this locality - preserving relation _ @ xmath909 is also expressed in the language via expression , _ @ xmath916 . similarly , @ xmath917 _ @ xmath918 . s . r . roychowdhury , _ @ xmath919 - - and the quantum computer are finitarily - related _ , string theory and quantum computing , contemp . 430 , amer . soc . , providence , ri , 2007 , 123 - 134 .