Moreover, it is known as the steiner tree. In this steiner tree, each pair of nodes indicates a connection requirement, and the aim is to find a minimum-cost subgraph that has a disjoint path for each pair of nodes. For example, if we take an integer and ask for the minimum-cost subgraph that is @ xmath8 - edge or @ xmath8 - vertex connected. For the simple fact that the problem is np-hard, as well as apx-hard to approximate. Many interesting and large problems are of the following kind: given a graph with edge or node costs, find a minimum-cost subgraph that is a subgraph between two nodes, called the terminals. In sndp, each pair of nodes specifying a connection requirement, and the goal is to find a minimum-cost subgraph that has at least two disjointed paths for each node @ xmath 14. Thus, many beautiful and powerful methods and results have been developed over the years, with particular attention to the primal-double method, and erated rounding. (See: xcite) Many of these problems are special cases of the survivable network design problem (sndp): in sndp, each pair of nodes ... have a connection requirement ... The most studied of these problems is the @xmath0 - mst problem. The goal is to find a minimum subgraph of the given graph xmath2 that contains at least @xmath0 vertices (or terminals) . we use the notation @xmath0 - mst in order to refer to this problem. The authors of @xcite , for instance, have taken up an algorithm of similar approximation for the @xmath0 - mst problem, which, as we have just mentioned, is an approximation of @xmath0 - mst. These problems have been widely studied, and their study has lead to a number of new ideas and applications. " To be precise, the steiner tree problem has the advantage of being able to reduce the cost / length of the path, subject to the condition that it contains at least @xmath0 vertices. " However, the algorithm and proof in @xcite are incorrect. Then, in this respect, lau et al. I've been using the term 'Answer' for a number of years. Here, in particular, we are addressing the 'Brother' version of the problem, where the subgraph has to contain @xmath0 terminals, from a set of terminals @ xmath3. note, however, that this reduction is only applicable to 'Brother' connections. In this paper, we study the 'Brother' version of the problem, where it is necessary to make the subgraph contain @xmath0 terminals from a set of terminals that are shown in xmath3 . . . we create the "Curtain's" version of the problem, in which the subgraph must contain at least @ xmath0 terminals from a set of terminals that are identified in Xmath3 . . . Note, however, that this reduction only applies to the relationship of the opposite vertices. . . . in this paper we consider the connection of the terminals generalized from the xmath0-cvc problem. The xmath0-cvc problem can be reduced, as follows, to the uniform problem of each vertice as a terminal: for each vertice xmath24, create dummy vertices xmath25 and attach xmath27 to xmath28 xmath28, and connect xmath8 to xmath28, where xmath8 is equal to math8 vertices xmath26. We do not, however, have any proof. As the problem is equivalent to the dens-@ xmath1vc problem, which is defined in the next section, we also find the following theorem: - the graph xmath5 with edge costs and xmath32 terminals xmath36, and we, on the contrary, can find a simple cycle containing at least @ xmath1 terminals (non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-non-n We mainly use the algorithmic ideas that led to poly logarithmic approximations of the Xmath0 – steiner-forest problem. Here we consider the rooted version of Xmath0 – Xmath1 : the aim is to find a min–cost subgraph which – xmath1 – connects at least – xmath0 terminals to a specified root vertex – xmath39 . Thus we have to rely on alternative and problem-specific methods. Using the known bound of xmath1 on the integrality gap of a natural lp, we can thereby solve the sndp problem with requirements for vertex connectivity in xmath6 . – The density of xmath6 is simply the ratio of the cost of xmath6 to xmath40 . We show how the different algorithms lead to poly-logarithmic approximations of the xmath0-mst problem . – The xmath0-mst problem is to find a 2 connected subgraph of minimum density . – As a general rule, we employ the known bound of xmath1 on the integrality gap of a natural lp for the sndp problem, with a vertex-connector requirement in xmath6 . – then, the density of xmath6 is simply the ratio of the cost of xmath6 to the cost of xmath40 . I will give a slightly modified version of the cycle-merging algorithm , we shall also include a more sophisticated and non-clumsy analysis, and obtain an improved version of the result. To overcome this problem, we may try to ‘prune’ the last subgraph added in the last iteration in order to achieve only the number of terminals required. Consequently, this last step would not be so easy as to result in an approximation of xmath4—if xmath4 is known. one of our technical contributions is to present an approximation of the problem of xmath0. To do this, we use two algorithms. First, we combine the scheme of cycle-comparison in the theorem [thm: cycle] and the other, we combine this cycle-comparison to find out repeatedly how many terminals there are in a given sub-graph, and we result in an approximation of xmath46. In order to overcome this problem, we use two algorithms: the first is the cycle-comparison of the Theorem [theorem] . The second, we use this cycle-comparison to merge sub-graphs in a continuous way until we get the desired number of terminals in a single sub-graph. , you can recognize the whole k- -v- g problem, which is explained in theorem - cycle - a simple cycle, which we work on by theorems - cycle and corollary - c-cycle ... so, let's consider the first k--v--vc problem, the first k--v--problem, and then take up the k--v--problem as a result of the k--v--problem, we also take advantage of the first k--v--problem to find a k--v--problem for the at least k--v--statistics ... for simplicity, we stick to the more limited version ... (we now call it the k--statistics--statistics--statistics--is an incomparable work of lau, et al.). In order to define the k--statistics of a subgraph, we use the sophisticated concept of no-where x-minus x-minus - = X-minus ... this method is also quite different from our method, since it is a complete lp of x-min=1 - and the k--statistics--wasteful equation; but in the k--statistics--problem, they use the simpler idea of no- where zero = X-min=6, wherein the sum of the weights of the terminals of x-min=6 ... for the sake of simplicity of explanation, we stick to the more restricted version. In the dens-a-c-c problem, the goal is to find a subgraph of minimum density in which all terminals of a subgraph of a subgraph of a subgraph are at least 2 (in optimal solutions), and the following procedure is presented in the section 'lem: densv'. There is a 'nanc' algorithm for the dens-a-c-c problem, where nanc' is the number of terminals in the given instance. It relies on an 'nanc' approximation, using a natural lp, for the min-nanc'-connectivity problem due to fleischer, jain, and williamson 'xcite', and on some standard techniques. Here is an 'nanc' approximation for the dens-a-c problem, in which nanc' is the minimum cost of the solution, and if the cost of these added paths is greater than nanc' , we ignore this extended abstract . This is a high-level description of the algorithm for the rooted dens-a-c problem, given below. Let nanc' be the cost of the optimal solution to the dens-a-c problem, where nanc' is the number of terminals in the given instance . we erect the graph by deleting any terminal which has not two dens-a-c paths to the root at least at least @ nanc'. ‘Close-up’ loop of the if loop, the graph contains a solution to the dens-–@xmath1vc problem of density at most @xmath62. Hence, the graph @xmath6 always has density at most @xmath62 . . . so, we only have to constrain the cost of the graph @xmath58 that was added in the pruning step; we prove the following theorem in the section ‘Close-up’ . We can now prove our main result for the dens-–@xmath1vc problem, theorem. – This graph contains a solution to the dens-–@xmath1vc problem of density at most @xmath62 . . . otherwise, we have a graph @xmath6 of good density but with too many terminals . . . if @xmath55 is added to @xmath42 and decrements @xmath59; we call this the pruning step . . . He also showed that the problem of dens-xmath1vc was as follows: given a graph of xmath5, with a line of costs of xmath71, and a line of density of xmath72 , he was then able to find a graph of xmath58 containing xmath59 connections, and cost xmath73. Then he showed a diagram of a finite Dense (hi), in which each vertex of xmath39 is connected to xmath39 in two unconnected paths. ; therefore, the total cost of the solution is xmath74 . we are to show lemma (hi: densv) that there is an approximation of dense [hi: densv] at xmath75, and theorem [hi: avekv] for the cost of the pruning step . (in this case, the density of xmath6 is defined as the cost of xmath6 divided by the number of terminals, not including xmath39 .) , we will show the latter in section [hi: pruning] in section [hi] below. (Here, the density of xmath6 is defined as the cost of xmath6 divided by the number of terminals, not including xmath39 .) * Let Xmath78 be the set of all simple cycles containing Xmath78 and the root Xmath39; for any Xmath82, Xmath83 shows how much flow is sent from Xmath78 to Xmath39 through Xmath35 . . . ( Note that a pair of vertex-disjoint paths is a cycle; the flow of a cycle is 1 if we can connect xmath78 to xmath39 through the edges of the cycle .) , the variable Xmath79 shows whether or not the edge Xmath85 is used in the solution . . . . , we now show how to obtain an integral solution of density, which is xmath88, where xmath89 is the cost of an optimal solution of dens . . . (for simplicity, assume xmath91 to be an integer) Let xmath90 be the set of terminals xmath78, such that xmath93 is . . . (subject to xcite ) to find a fractional solution of "lp-dens" , to find a given fractional solution of "lp-dens" such that "lp-dens" corresponds to the feasible solution of Xmath105 with Xmath92 as the set of terminals. The integrality gap of 2 means that there is a subgraph of Xmath6 in which every terminal of Xmath92 is 2 connected to Xmath39, and thus there is an approximate solution of xmath37 of the dens- - @ Xmath1vc problem. therefore the algorithm for dens--@ xmath1vc is: a. to find the optimal fractional solution to lp-dens . . . find a set of terminals of xmath92 such as Xmath107 . . . find the optimal fractional solution to lp-dens . . . find a set of terminals of xmath92 such that xmath107 . . . find the optimal fractional solution to lp-dens . . . find a sub-graph of xmath6 in which every terminal of xmath92 is 2 connected to xmath39 using the '1' function . . . In this section we give an xmath75-adjustment algorithm for the minimum-density non- trivial cycle problem. Theorems for the non- trivial cycle are of use in the solving of the @xmath0 - @xmath1vc and @xmath1 - @xmath1ec problems. For the least-density non- trivial cycle we propose two algorithms: the first, described in section [sub-section], is a simpler algorithm, but the time is not polynomial. This is why we suggest to skip this proof on the first reading. We give a more technical proof that leads to a very strong polynomial time algorithm, and we recommend that it be skipped on the first reading. In this section we give an inverse approach to the minimum-density non- trivial cycle problem. Let Xmath35 be a non- trivial cycle, and Xmath6 an ear that is adjacent to Xmath35 in Xmath50 and Xmath10 is an ear that is not lower than xmath110 . . . . «math116 , «math117 and «math120 , «math120 and «math121 , «math120 and «math121 be, respectively, the costs of the edges in «math113 and «math6 , and «math121 be the sum of the weights of the terminals in «math110, «math113 and «math122 , and «math123 has cost « and «130 weighs «. «xmath115 , « «1 and ««12, are equal to *[1], therefore « « is a simple cycle containing at least 2 terminals of density less than «[12] «219 . Let «xmath118 be an arbitrary connected component of ««, and let ««« . . . . . it is necessary that ««12 be an arbitrary connected component of ««««« «| if you set @xmath2 as a graph with at least @xmath1 terminals. @xmath2 contains a simple non-stupid cycle; this cycle always exists, since @xmath2 is connected and has at least two terminals. The vertex xmath50 cannot be xmath48, for xmath6 is a connected component of xmath127. let xmath41 be a graph formed by putting the given cycle xmath35 to a single vertex xmath28 . Let xmath138 be an algorithm that finds a new non-stupid cycle - xmath139 such that - xmath138 . . . In this case, the cycle xmath136 , the non-stupid cycle - because xmath2 is two-wayed and has two-wayed ... But if xmath134 , Xmath28 and Xmath131 are the same component of xmath135 , so deleting xmath50 does not separate Xmath131 from xmath133 . . . When we add the average of two-thirds, we add a non-zero cycle in xmath4 to xmath42. Lastly, if xmath4 has exactly one terminal, we find two distinct paths, the edge of xmath4, from xmath50 to the vertices of xmath35, that are ear-like in xmath4. if xmath4 has two or more terminals, we recursively find a non-zero cycle in xmath4 that is not @ xmath140 . . . and we are done. . . . in section Second section Second section Second section Second section Second section Second section , we describe a highly polynomial-time. In the following section we describe the extremely polynomial-time algorithm, namely, the hampered method, Second method. . . . . . . see that any example of the dens-at-xmath1vc problem has an optimal solution that is non-trivial. Suppose we have an @xmath145 approximation for the dens-at-xmath1vc problem, and we use it to find a low-density, non-trivial cycle . . . (evidently, consider any optimal solution @xmath6 of density @xmath146; by the theorem _cycle_, our solution in the dens-at-xmath6 of density at most @xmath146 is at most @xmath146 times the density of this cycle. So, a @xmath147 approximation for the minimum-density non-trivial cycle gives a @xmath147 approximation for the dens-at-xmath1vc problem. This is a corollary ... Note that all the dens-at-xmath1vc problems have an optimal solution, which is non-trivial . . . “Second, in this section we present a strong polynomial-time algorithm that, given a two-connected graph with a ratio of cost and terminal weights, finds a non-precise cycle of density at least as big as that of xmath5. Thus, if xmath35 is simply a path, then it is an ear of xmath35, but xmath151 is more complex. The definition of earring is that if a pair of earrings of xmath151 were simply a path, it would be an ear of xmath151, but xmath151 is a much more complicated graph. For every xmath35, let the vertices of xmath35 incident on it be called the clasps of xmath35. By deleting a segment, we refer to deleting the edges of the object whose boundaries are in xmath35. 4 For each xmath35, let the vertices of xmath35 be called the clasps of xmath35 . . . For every xmath35 we define the “branch” as a path which connects two different earrings, which are all in xmath151. Note that the endpoints of xmath13 are endpoints of the same earring or of different earrings . . . we say that a vertex of xmath35 is an “alarm” if it is an anchor (a anchor may be an anchor of more than one earring . . . ) The arc of an earring is the subgraph of xmath35 found by crossing clockwise from its first clasp @ xmath156 to its last clasp @ xmath157; the length of this arc is @ xmath158. (This arc is the number of edges it contains) at xmath158. ( if it contains the origin it is the first.) at xmath156, at xmath156, at xmath156, at xmath156, at xmath156, at xmath156, at xmath155, at xmath156, at xmath156, at xmath158, at xmath155, at xmath156, at xmath156, at xmath156, at xmath156, at xmath156, at xmath156, at xmath15, at xmath155, at xmath150, at xmath330, at xmath330, the longest arc. xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164; xmath164, xmath164; xmath164; xmath164; xmath164; xmath164; xmath163; xmath163; xmath164; xmath165; xmath165; - 330; - 330; - 330; - 330; - 330: - 330; - 330; - - 330; - 330; - 330; - 25; - 2 mm; - 25; - 2 mm; - - 2 mm; - 0 , 2 mm ; - 0 , 2 mm ; - 15; - 15 : 0 , 0 - 2 ; “Anchor: 2 cm” (bm) “Anchor: 2 cm” (bm) “Anchor: 2 cm” (bm) “Anchor: 2 cm” (bm) “Anchor: 2 cm” (bm) “Anchor: 2 cm”; “Anchor: 2 cm”; “Anchor: 2 cm”; “Anchor: 2 cm”; “Anchor: 2 cm”; “Anchor: 2 cm”; “Anchor: 2 cm” (actor:  4 cm) “Cnchor, 2 cm”; “Anchor:  4 cm” (chor, 2 cm) “ Achor (Engr.) [Hist.] [D]. — “ The “commonplace”: a circle, a sphere, a circle, a circle (a sphere); (a sphere, a circle (a sphere); (a sphere, a circle (a sphere); (b sphere, a circle, a circle (a sphere); (c sphere, a circle (a circle); c sphere, a circle (a circle); c sphere, a circle (a sphere); c sphere, a circle (a circle); c sphere, a circle (a circle); c sphere, a circle (a circle); c sphere, a circle (a circle); c sphere, a circle (a circle); c sphere, a circle (a circle); c (c sphere) c sphere (c sphere); c sphere (c sphere) ; c sphere (c sphere) ; c sphere (c sphere) ; c sphere (c) ; c sphere (c sphere) - ; c sphere (c sphere) sphere (c sphere) ; c sphere (c sphere) ... ) ; sphere (c) - c (sphere) ; sphere (sphere) ) ; sphere (sphere) ... sphere ... ) ; sphere (sphere) - sphere (sphere) ) - sphere (sphere) ... ; sphere ... (90 : - 90 : 3 . 6 cm) (0, 2 ) ; ( - 90 : 3 . 6 cm) ; ( - 90 : 3 . 6 cm) ; ( - 115 : 35 : 2 . 8 cm) ; ( - 35 : 2 . 4 cm) ; ( - 30 : 2 . 4 cm) ; ( - 30 : 2 . 4 cm) ; ( 30 : 2 . 2 cm) ; ( 30 : 2 . 2 cm) ; ( 30 : 2 . 2 cm) ; ( 35 : 2 . 2 cm) ; ( 35 : 2 . 2 cm) ; (35 : 2 . 2 cm) ; ( 35 : 2 . 2 cm) ; (35 : 2 . 2 cm) ; (150 : 2 ) ; (150 : 2 . 2 cm) The first path is a clockwise line from xmath175 to xmath176 in the cycle of xmath35. The second path is entirely in the earring at xmath58 (an earring is connected to xmath177 so we can always find such a path.) is given an arbitrary segment at xmath13 in the critical arc. we will assume that there are always two internally perpendicular paths between xmath156 and xmath157 in xmath152. Hence we will prove that there are always two perpendicular paths between xmath156 and xmath157 in xmath152. . . . if xmath156 and xmath157 are located in the same earring at xmath58 (an earring is connected at xmath177, so we can always find such a path.) , otherwise Xmath156 and Xmath157 are different earrings. In the first place we consider that both xmath156 and xmath157 are clasps of earrings in xmath169. So let @ xmath156 be a clasp of xmath166, and @ xmath157 be a clasp of xmath167. and then from xmath164 to xmath157 is a clasp of xmath164 , then from xmath164 to xmath156, and then from xmath164 to xmath156, and then from xmath164 to xmath157 , then from xmath164 to xmath166 , then from xmath164 to xmath165, and then from xmath165 to xmath157 , a skeleton of the skeleton of the skeleton of the skeleton, so it can be easily seen that these paths are internal, and are internal. So, the first way, from xmath157 to xmath164, is the last way, from xmath164 to xmath164, from xmath164 to xmath164 to xmath165, and again from xmath164 to xmath164, is a skeleton of xmath164. , if not xmath166, then xmath179 is a skeleton of xmath164. , the second path is from xmath157 to xmath164, through the critical arc, and from xmath164 to xmath156, clockwise through xmath35. The internal vertices of the first path are on the critical arc, but have indexes greater than xmath175 , internal vertices of the second path are either not in the critical arc, or have indexes between xmath164 and xmath156 , so that the two paths are internally disjointed. The following figure—fig. earringproof—shows the paths. Let xmath2 be a graph with xmath32 terminals and density xmath146; we describe a polynomial-time algorithm that either finds in xmath2 a cycle of density that is less than xmath146 , or there is a polynomial-time algorithm that either finds in xmath2 a cycle of density less than xmath146 . we describe a polynomial-time algorithm that either finds in xmath2 a cycle of density less than xmath146 . . . . and in the case of @xmath35, let xmath28 be the origin of this cycle, and xmath6 an earring of a minimum length. If xmath35 has at least two terminals, then it follows that there must be at least one earring of @xmath35 . . . (if the shortest period of the cycle contains no terminals, it has a safe segment, which can be deleted; this is a contradiction .) The proof above also shows that if xmath2 is not even 2 connected (that is, if xmath2 has no proper subgraph, which consists of all its terminals) then every cycle of xmath2 is non- trivial. Therefore, given a graph that is minimally 2 connected (that is, @ xmath2 has no proper subgraph that contains all its terminals) , all cycles of xmath2 are non- trivial. In the case of a cycle of 0 or 1 terminals, there is a safe segment containing no terminals which can be deleted; this is a contradiction. Theorem [thm: earringproof] shows that all segments in the arc of @ xmath6 are safe. At the end of the process we describe an algorithm to find a subgraph of xmath6 of xmath2 which contains at least xmath0 terminals, each of which has two axes connected to the root and of total cost at xmath189. Let xmath32 be the number of terminals in xmath2 and xmath189 be the total cost; xmath190 is the density of xmath2 . let xmath32 be the number of terminals in xmath2 and its cost; Xmath189 is the density of xmath2 . (The weight of a cluster, numbered xmath136, is a close relative quantity to the number of terminals containing it .) the main stage of our algorithm is to maintain a set of 2 connected subgraphs, which we call clusters, and to find low-density cycles that combine clusters of similar weight to form larger clusters. A cluster is large if it is at least xmath0, and small otherwise. We first say that a cycle is good if it has at least xmath0 weight, and if it is not small. In iteration @ xmath95, the terminals correspond to clusters of tier @ xmath95 , we briefly mention some relevant aspects of this algorithm and our analysis before presenting the results of the analysis . . . if (@ xmath199): add a (dummy) terminal to xmath199, with a weight of xmath193; if (dummy) edges of cost 0 are added from xmath199 to two (arbitrary) distinct vertices of xmath136 ; if (at xmath199): add a (dummy) edge of cost 0 from xmath199 to two (arbitrary) distinct vertices of xmath136. ; so at any stage of the algorithm all small clusters are edge-separated.2 .. 1 in iteration .. . . in iteration .. in . . . . in . . . . in . . . . in . . . we remark briefly on the salient features of this algorithm and our analysis, and then we show the proofs . . . It is for this reason that we present the analysis, although it is not enough to prove theorem [Avekv] ., the only structural change is that in the form of new vertices we are forming terminals. The weight of a cluster is the number of terminals in it. Because we always use low density to merge clusters, an analysis similar to that of @xcite and @xcite shows that every large cluster has density at least @xmath205 . the weight of a cluster is the number of terminals in it . this means that, when the algorithm terminates, most terminals are in large clusters. however, we have chosen @xmath144 (which defines the density of good cycles) so that we can account for the number of terminals left behind  . therefore, when the algorithm terminates, most terminals are in large clusters. we then make the formal proof that mergeclusters has the desired behavior. The only structural changes to @xmath2 are that new vertices are added to the terminals, and the edges are added with edges to two distinct vertices of @xmath2 . This ensures that the density of the cluster is at most equal to the number of terminals it contains. Let the axes @ xmath35 be bonded by a cycle @ xmath35 in order to join the clusters of xmath200. (Note that we have shown that axes @ xmath35 are bonded by induction, and that axes @ xmath35 contain at least two vertices of each axes @ xmath213 be bonded together, so that axes @ xmath214 are bonded together.) . . . note that we have shown that axes @ xmath35 are 2 , but axes @ xmath35 (and hence axes @ xmath202) contain dummy ends and corresponding edges. however, each such dummy end, with two corresponding edges, is an ear of @ xmath202; deleting them leaves the ear of @ xmath202 . The clusters formed by a chain of cubes are all at xmath200 . . . the combined clusters of axes at xmath2 are all @ xmath216 . Then a simple averaging argument will show that there are multiple slices of xmath211s with total weight between xmath0 and xmath225, and that the cost of the edges of xmath35 connecting these slices, together with the cost of the clusters themselves, is at most xmath226 . In the past we have shown that most of the terminals reach large clusters, all of which are 2 – connected, but we have not argued about the density of these clusters. Let Xmath200 be the clusters merged to form a cluster formed by merge-clusters. Let Xmath227 be the first-time cluster of a type of xmath226 , the weight of large clusters is at least xmath218 . We assume that every terminal can be 2–connected to – 2–int’l ‘and’ so to – 2–and– he could compute that if we compared the two points at –x–m––f’ (both the points at –x–f’ and ‘the points at –x–f’) and we take our graph to be a collection of at least – 2–connected terminals, with the greatest costs at –x–f’. For the sake of simplicity we make the following logical arguments. As the basis for our argument, we deduce that each of the terminals could be two points at –x–f’–f’ and with such disjointed paths of cost at most ‘x–f’ . Let ‘x–f’ be an arbitrary location of –x–f’; let’s say ‘x–f’ is cut off, and that ‘x–f’ becomes ‘x–f’ in –f’. Then we deduce that ‘x–f’ contains two points at –x–f’, which when –when ‘x–f’ is deleted, ‘x–f’ can’t separate ‘x–f’ from ‘x–f’, which gives a contradiction. And in a manner of speaking, we define two points at –f’ in –f’ in –f’: from –f’ to –f’, and –f’ to –f’. Our reasoning is simple. Let ‘x–f’ be an arbitrary vertex of –f’. Suppose that there is a cut-off vertex at –f’131 which, if cut-off, The main difference between the two analyses of density is that they use edge costs separately, as all cycles have density at least at least @ xmath246. In the first place, the two analyses of density are divided in two parts. First, we compare the density of a cluster formed by merging a cluster formed by merging a cluster in xmath95, which is at most @ xmath247. Second, we calculate the difference in density between clusters which have edge costs at least @ xmath247 . we calculate this factor by resolving the number of vertices in the cluster. , it is possible that an edge is in a cluster of xmath205 , then the combination of xmath234 and xmath235 forms a similar result. In the first case, each cluster pays for its edge separately, because all the cycles that are used have an average density of @ xmath247 . we are trying to prove this proof by inducing the number of vertices in a cluster. We have now presented the two estimations of density. Let xmath248 be the set of clusters that have been merged by a cycle @ xmath35 to form a cluster @ xmath202. Let xmath249 be the set of clusters in xmath248 in tier # xmath95, and xmath250 be a set of clusters in tier # xmath95 in tier # xmath2. Let xmath249 be the set of clusters in tier # xmath247, and let xmath250 be let @ xmath202 be an arbitrary large cluster; since only @ xmath220 tiers exist, the previous lemma implies that the cost of @ xmath249 is at most @ xmath253. Therefore, the cost of all edges in @ xmath249 is at most @ xmath253 , we can use induction to prove that the cost of edges in @ xmath249 is at most @ xmath253 . finally, because @ xmath35 was a good density cycle, and only clusters of tiers of tiers of tiers were included in calculating the density of @ xmath35, so the cost of @ xmath35 is at most @ xmath254 , so the total cost of edges in @ xmath249 is at most @ xmath256 . We can use this fact together with lem: avekv to find a solution to the rooted – @ xmath0 – @ xmath1vc problem of cost at most @ xmath257 . Finally, because , for a good density cycle, only clusters at xmath95 contribute to the calculation of the density of @ xmath35 , the cost of @ xmath35 is at most @ xmath255 . We also add the edge of @ xmath202 to each of @ xmath203; xmath202 is the parent of xmath259 , if there is a high density of xmath35, then Xmath136 will join together with other xmath35 . for example, after xmath95 we may merge several tiers of xmath95 to form a tier of xmath136 , then , if we find a good density of xmath35 that contains an edge of xmath136 , Xmath136 will merge with the other tiers of xmath35 . . . now we define the 'last' cluster of xmath202 : these are the clusters formed during iteration xmath95 that became part of xmath202 . . . For each large cluster formed by the algorithm, we call it 'the tree of xmath260' . . . as a final cluster of xmath202 (we list xmath202 itself in the list of final clusters; though xmath202 was formed in iteration xmath95 of xmath, it may contain other final clusters.) The leaves of the trees are related to vertices of xmath2; they all cost 0 . Similarly, if, in iteration @ xmath262, 4 clusters of this level merged together, to form @ xmath263; that is, a cluster of @ xmath264 . Note that the cost of this cycle is determined by the weights of @ xmath267 and @ xmath266 only; @ xmath266 is an edge of this cluster, and therefore these three clusters merge together to form @ xmath266 . [ ] a c a d a c a d a d a c d a c d a c d a c d a d a c d a c d a c d a d a c d a d a c d a c d a c d a d a c d a d d    d  a c d   a  a  a  a  a    a   a  a  a  a  1 , 4    a e – b – f – g – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t, -t – t – t – t – t, – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t – t “With xmath260, the weight of Xmath235 is xmath 144 times the weight of Xmath235’s uppermost tier xmath95 clusters that will be formed by Xmath235 . (note that a tier xmath235 cluster must have been formed prior to iteration xmath95, and hence it cannot be a final tier xmath235 cluster.) in order to count the total final cost of Xmath235, we must define the sum of the costs of the vertices of Xmath260 associated with the lower tier xmath235 clusters . . . the weight of xmath235 , -127 is at least the weight of the penultimate tier xmath235 clusters that become part of Xmath235. (note that the lower tier xmath235 cluster must have been formed prior to iteration xmath235, and therefore it cannot be considered a final tier . . . ) As an equilateral scale, the number of edges composing a final row, in fact, containing the number of sides containing the number of sides, is the equilateral scale of the equilateral scale. As a result, it must be the case that, in order to be the last row, both rows forming the equilateral and the final row are formed before the equilateral movement of xmath95. For every equilateral row, at most one row, has a density of more than xmath270. The final row, at least one row, has density as high as xmath270. The following table describes the final row of the aggregated costs of all large clusters. As long as xmath95 and xmath290 are the same, they are not part of a large cluster and two small clusters cannot share an edge without blending. Therefore, the merged row of xmath275 and xmath290 must have been merged, so that they can no longer be members of distinct large clusters, causing the desired contradiction. Hence, the sum of the final costs of a large cluster is the ratio of the final cost to its weight . Theorem [ h., p. 24] and lemma [ h., s. ] have been made to prove the existence of the problems of the rooted h. h. h. h. at most h. h. h. avekv. , we have obtained an approximation of h. h. h. - h. - vccv. In general, a great deal is known for problems where the vertex - wriggle-hook connection is greater than two, but recent studies are making great strides in the area of the point of kerf. h. h. h. h. h. xmath. - h. v. , this is a full proof of the theory [1] [3] , it has been proved that we can find a solution to the rooted "h" -hlm., this is at most - xmath270, therefore, the density of hlm202 is at most - hlm284. We have also found an hlm37-approximation for the problem of finding a minimum-hlm non- trivial cycle.